<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<doc>
    <assembly>
        <name>LogicNP.EZShellExtensions</name>
    </assembly>
    <members>
        <member name="T:LogicNP.EZShellExtensions.BrowseFlags">
            <summary>Specifies options when Windows Explorer browses to a folder using the  Utils.BrowseTo method</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.BrowseFlags.None">
            <summary>No options specified.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.BrowseFlags.BrowseDefault">
            <summary>Indicates default options.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.BrowseFlags.BrowseSameWindow">
            <summary>Indicates that the same Windows Explorer window should be used to browse the folder.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.BrowseFlags.BrowseNewWindow">
            <summary>Indicates that a new Windows Explorer window should be used to browse the folder.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.BrowseFlags.ModeDefault">
            <summary>Indicates default browse mode.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.BrowseFlags.ModeOpen">
            <summary>Indicates 'open' browse mode : the tree view on the left side is not visible.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.BrowseFlags.ModeExplore">
            <summary>Indicates 'explore' browse mode : the tree view on the left side is visible.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.BrowseFlags.NavigateParent">
            <summary>Indicates that the parent folder of the currently browsed folder should be browsed.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.BrowseFlags.NavigateBack">
            <summary>Indicates that previous folder in the navigation history should be browsed.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.BrowseFlags.NavigateForward">
            <summary>Indicates that previous folder in the navigation history should be browsed.</summary>
        </member>
        <member name="T:LogicNP.EZShellExtensions.BrowserHelperObjectType">
            <summary>Specifies various types of browser helper objects.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="F:LogicNP.EZShellExtensions.BrowserHelperObjectType.Invisible">
            <summary>Specifies that the browser helper object is invisible - it is loaded everytime Internet Explorer starts but it does not have any visible parts.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.BrowserHelperObjectType.ToolsMenuItem">
            <summary>Specifies that the browser helper object is a menu item in the 'Tools' menu of Internet Explorer.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.BrowserHelperObjectType.HelpMenuItem">
            <summary>Specifies that the browser helper object is a menu item in the 'Help' menu of Internet Explorer.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.BrowserHelperObjectType.ToolbarButton">
            <summary>Specifies that the browser helper object is a toolbar button in the toolbar of Internet Explorer.</summary>
        </member>
        <member name="T:LogicNP.EZShellExtensions.CachingPolicy">
            <summary>Specifies various caching policies for a thumbnail extension.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.CachingPolicy.None">
            <summary>Specifies that thumbnails are not cached and a thumbnail will be requested everytime the file is display in Windows Explorer or a similar browser application.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.CachingPolicy.FromFileWriteTime">
            <summary>Specifies that thumbnails generated by the thumbnail extension will be cached and the datetime stamp for the thumbnail will be taken from the last write time of the file for which the thumbnail is being requested. If the last write time of the file changes, the thumbnail will be regenerated.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.CachingPolicy.Explicit">
            <summary>Specifies that thumbnails generated by the thumbnail extension will be cached and the datetime stamp for the thumbnail will be specified by the extension when the  OnGetDateTimeStamp method is called. Thumbanails will not be extracted again unless the datetime stamp returned by this method is different from the cached datetime stamp.</summary>
        </member>
        <member name="T:LogicNP.EZShellExtensions.ColumnJustification">
            <summary>Specifies the text justification of the column</summary>
            <remarks>None.</remarks>
        </member>
        <member name="F:LogicNP.EZShellExtensions.ColumnJustification.Left">
            <summary>Indicates that the text is left-justified.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.ColumnJustification.Right">
            <summary>Indicates that the text is right-justified.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.ColumnJustification.Center">
            <summary>Indicates that the text is centered.</summary>
        </member>
        <member name="T:LogicNP.EZShellExtensions.ColumnState">
            <summary>Specifies the various states of the column.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="F:LogicNP.EZShellExtensions.ColumnState.HasStringData">
            <summary>Indicates that the data displayed in the column is a string.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.ColumnState.HasIntData">
            <summary>Indicates that the data displayed in the column is a numeric value.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.ColumnState.HasDateData">
            <summary>Indicates that the data displayed in the column is a date/time.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.ColumnState.OnByDefault">
            <summary>Indicates that the column is always displayed.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.ColumnState.Slow">
            <summary>Indicates that the data provided by the column extension takes time to produce.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.ColumnState.Extended">
            <summary>Not used.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.ColumnState.SecondaryUI">
            <summary>Indicates that the column can only be selected through the "More.." dialog box displayed when right-clicked on the column header in Windows Explorer.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.ColumnState.HiddenFromUI">
            <summary>Not used.</summary>
        </member>
        <member name="T:LogicNP.EZShellExtensions.ControlWindow">
            <summary>Specifies control windows in the host browser (typically Windows Explorer).</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.ControlWindow.StatusBar">
            <summary>Specifies the status bar in Windows Explorer.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.ControlWindow.ToolBar">
            <summary>Specifies the toolbar in Windows Explorer.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.ControlWindow.Tree">
            <summary>Specifies the tree view(left side) in Windows Explorer.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.ControlWindow.InternetBar">
            <summary>Specifies the address bar in Windows Explorer.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.ControlWindow.ProgressBar">
            <summary>Specifies the progress bar in Windows Explorer.</summary>
        </member>
        <member name="T:LogicNP.EZShellExtensions.DiskCleanupMode">
            <summary>Specifies the mode under which the disk cleanup extension should do the cleanup operation.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="F:LogicNP.EZShellExtensions.DiskCleanupMode.Normal">
            <summary>Indicates normal disk cleanup mode.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.DiskCleanupMode.Aggressive">
            <summary>Indicates that the disk is extremely low on disk space and the disk cleanup extension should adopt an agressive approach to the cleanup.</summary>
        </member>
        <member name="T:LogicNP.EZShellExtensions.DriveType">
            <summary>Indicates the drive type.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.DriveType.Unknown">
            <summary>    Indicates that the drive type cannot be     determined.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.DriveType.NotRootDirectory">
            <summary>Indicates that he root path is invalid.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.DriveType.Removable">
            <summary>Indicates that he drive has removable media.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.DriveType.Fixed">
            <summary>Indicates that he drive has fixed media.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.DriveType.Remote">
            <summary>    Indicates that he drive is a remote or network     drive.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.DriveType.CDROM">
            <summary>Indicates that the drive is a CD-ROM drive.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.DriveType.RAMDisk">
            <summary>Indicates that the drive is a RAM disk.</summary>
        </member>
        <member name="T:LogicNP.EZShellExtensions.ExecuteMenuItemFlags">
            <summary>Specifies the flags/settings in effect when the  OnExecuteMenuItem method is called.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="F:LogicNP.EZShellExtensions.ExecuteMenuItemFlags.ShiftKeyDown">
            <summary>Indicates that the shift key is pressed.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.ExecuteMenuItemFlags.ControlKeyDown">
            <summary>Indicates that the control key is pressed.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.ExecuteMenuItemFlags.DontDisplayUI">
            <summary>Indicates that no UI dialogs or forms should be displayed when the menu item is executed.</summary>
        </member>
        <member name="T:LogicNP.EZShellExtensions.GetSystemIconIndexFlags">
            <summary>Specifies the type of icon to retrieve.</summary>
            <remarks>    These values can be combined together to specify     different types of icons ( example : small open icon).     This enumeration is used with the          GetSystemIconIndexFromExtension and          GetSystemIconIndexFromPath methods of the          Utils class.</remarks>
        </member>
        <member name="F:LogicNP.EZShellExtensions.GetSystemIconIndexFlags.None">
            <summary>None.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.GetSystemIconIndexFlags.OpenIcon">
            <summary>Specifies that the open icon is to be retrieved.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.GetSystemIconIndexFlags.LargeIcon">
            <summary>Specifies that the large icon is to be retrieved.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.GetSystemIconIndexFlags.SmallIcon">
            <summary>Specifies that the small icon is to be retrieved.</summary>
        </member>
        <member name="T:LogicNP.EZShellExtensions.IconExtractMode">
            <summary>Specifies the mode by which the icon extension provides icons to the shell.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="F:LogicNP.EZShellExtensions.IconExtractMode.IconFileAndIndex">
            <summary>Indicates that the icon extension provides icons to the shell by specifying the full path to an exe, dll or ico file and the index of the icon within that file.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.IconExtractMode.Icons">
            <summary>Indicates that the icon extension provides icons to the shell by supplying handles to loaded icons.</summary>
        </member>
        <member name="T:LogicNP.EZShellExtensions.KeyStates">
            <summary>Specifies the state of the Shift,Control and Alt keys and the mouse buttons.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="F:LogicNP.EZShellExtensions.KeyStates.LeftButton">
            <summary>Indicates that the left mouse button is pressed.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.KeyStates.RightButton">
            <summary>Indicates that the right mouse button is pressed.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.KeyStates.Shift">
            <summary>Indicates that the Shift key is pressed.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.KeyStates.Control">
            <summary>Indicates that the Control key is pressed.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.KeyStates.MedButton">
            <summary>Indicates that the middle mouse button is pressed.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.KeyStates.Alt">
            <summary>Indicates that the Alt key is pressed.</summary>
        </member>
        <member name="T:LogicNP.EZShellExtensions.NotifyResult">
            <summary>Specifies return values for the  OnApply method of the  PropertySheetExtension class.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="F:LogicNP.EZShellExtensions.NotifyResult.NoError">
            <summary>Indicates that no errors occurred while changes made to the extension page were being applied.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.NotifyResult.Invalid">
            <summary>Indicates that some error occurred while changes made to the extension page were being applied. If some other page is currently active on the property sheet, the extension page becomes the currently active page.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.NotifyResult.InvalidNoChangePage">
            <summary>Indicates that some error occurred while changes made to the extension page were being applied. If some other page is currently active on the property sheet, the extension page does not become the active page</summary>
        </member>
        <member name="T:LogicNP.EZShellExtensions.PropertySheetButton">
            <summary>Specifies one of the buttons on a property sheet.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.PropertySheetButton.OK">
            <summary>Specifies the 'OK' button on the property sheet.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.PropertySheetButton.Apply">
            <summary>Specifies the 'Apply' button on the property sheet.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.PropertySheetButton.Cancel">
            <summary>Specifies the 'Cancel' button on the property sheet.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.PropertySheetButton.Help">
            <summary>Specifies the 'Help' button on the property sheet.</summary>
        </member>
        <member name="T:LogicNP.EZShellExtensions.QueryContextMenuFlags">
            <summary>Specifies flags used when menu items are retrieved.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.QueryContextMenuFlags.Normal">
            <summary>    Indicates normal operation. All menu items can be     added.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.QueryContextMenuFlags.DefaultOnly">
            <summary>    Specifies that the user is activating the default action,     typically by double-clicking. The namespace extension should     add only the default item (if any).</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.QueryContextMenuFlags.VerbsOnly">
            <summary>    Specifies that the shortcut menu is for a shortcut     object.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.QueryContextMenuFlags.Explore">
            <summary>Specifies that the tree view in Windows Explorer is present.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.QueryContextMenuFlags.NoVerbs">
            <summary>Specifies that the menu is being displayed for the Send To menu.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.QueryContextMenuFlags.CanRename">
            <summary>    Specifies that the calling application supports renaming     of items. The namespace extension should add a rename item to     the menu if applicable.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.QueryContextMenuFlags.NoDefault">
            <summary>    Specifies that no item in the menu has been set as the     default. The namespace extension should not set any of the menu     items to the default.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.QueryContextMenuFlags.IncludeStatic">
            <summary>Not used.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.QueryContextMenuFlags.ForFileMenu">
            <summary>Specifies that menu items are being requested for the File menu of Windows Explorer.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.QueryContextMenuFlags.Reserved">
            <summary>Not used.</summary>
        </member>
        <member name="T:LogicNP.EZShellExtensions.ShellCommand">
            <summary>Specifies various shell commands.  " --></summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.ShellCommand.Open">
            <summary>Opens the item.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.ShellCommand.Explore">
            <summary>Opens Explorer in the folder specified by the item.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.ShellCommand.Properties">
            <summary>Shows the 'Properties' dialog box of the item.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.ShellCommand.Cut">
            <summary>Cuts the item.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.ShellCommand.Copy">
            <summary>Copies the item.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.ShellCommand.Paste">
            <summary>Pastes clipboard contents in the item.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.ShellCommand.Delete">
            <summary>Deletes the item.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.ShellCommand.Link">
            <summary>Creates a shortcut to the item.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.ShellCommand.Find">
            <summary>Opens the 'Find Files..' dialog box for the item.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.ShellCommand.Print">
            <summary>Prints the item.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.ShellCommand.Rename">
            <summary>Starts in-place renaming of the item in FolderView.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.ShellCommand.Default">
            <summary>Indicates the default command for the item.</summary>
        </member>
        <member name="T:LogicNP.EZShellExtensions.ShellOperationFlags">
            <summary>Specifies the settings/flags in effect during the shell operation</summary>
            <remarks>None.</remarks>
        </member>
        <member name="T:LogicNP.EZShellExtensions.ShellOperationResult">
            <summary>Specifies the result of a shell operation</summary>
            <remarks>None.</remarks>
        </member>
        <member name="F:LogicNP.EZShellExtensions.ShellOperationResult.AllowAll">
            <summary>Indicates that the current and all future shell operations should be allowed.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.ShellOperationResult.DisallowCurrent">
            <summary>Indicates that the current shell operation should be disallowed.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.ShellOperationResult.CancelAll">
            <summary>Indicates that the current and all future shell operations should be disallowed.</summary>
        </member>
        <member name="T:LogicNP.EZShellExtensions.ShellOperations">
            <summary>Specifies the type of the shell operation.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="F:LogicNP.EZShellExtensions.ShellOperations.Move">
            <summary>Indicates a move operation.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.ShellOperations.Copy">
            <summary>Indicates a copy operation.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.ShellOperations.Delete">
            <summary>Indicates a delete operation.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.ShellOperations.Rename">
            <summary>Indicates a rename operation.</summary>
        </member>
        <member name="T:LogicNP.EZShellExtensions.SpecialFolders">
            <summary>Specifies various system defined folders.</summary>
        </member>
        <member name="T:LogicNP.EZShellExtensions.ThumbnailAdornment">
            <summary>Specifies adornment to use for the thumbnail provided by the  ThumbnailProvider extension.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.ThumbnailAdornment.Default">
            <summary>Specifies that the default adornment should be used.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.ThumbnailAdornment.None">
            <summary>Specifies that no adornment should be used.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.ThumbnailAdornment.DropShadow">
            <summary>Specifies that a drop shadow should be displayed around the thumbnail.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.ThumbnailAdornment.PhotoBorder">
            <summary>Specifies that a photo border should be displayed around the thumbnail.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.ThumbnailAdornment.VideoSprockets">
            <summary>Specifies that video sprockets should be displayed around the thumbnail.</summary>
        </member>
        <member name="T:LogicNP.EZShellExtensions.ThumbnailAlphaChannel">
            <summary>Specifies alpha channel information about the thumbnail provided by the  ThumbnailProvider extension.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.ThumbnailAlphaChannel.Unknown">
            <summary>Specifies that alpha channel information is not known.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.ThumbnailAlphaChannel.Absent">
            <summary>Specifies that the alpha channel is absent.</summary>
        </member>
        <member name="F:LogicNP.EZShellExtensions.ThumbnailAlphaChannel.Present">
            <summary>Specifies that the alpha channel is present.</summary>
        </member>
        <member name="T:LogicNP.EZShellExtensions.ThumbnailSettings">
            <summary>Specifies the flags/settings in effect during thumbnail retrieval</summary>
            <remarks>None.</remarks>
        </member>
        <member name="T:LogicNP.EZShellExtensions.ShellExecuteInfo">
            <summary>Provides information about the object that is being executed.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="T:LogicNP.EZShellExtensions.AutoPlayExtension">
            <summary>Represents an autoplay extension. To develop your own autoplay extension, derive a new class from this class and override the appropriate methods.</summary>
            <remarks>    Whenever a CD/DVD or any other removable media is     inserted, Windows XP and later operating systems display a     dialog box which enables the user to perform common actions     such as 'View photos' or 'Play Movie'. An AutoPlayExtension     allows you to add your own action to this dialog box.     Whenever the user chooses your entry, the          OnDragDrop virtual method is called. Write your own code in     this method to handle the user's selection.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.AutoPlayExtension.#ctor">
            <summary>Initializes a new instance of a  AutoPlayExtension class.</summary>
        </member>
        <member name="M:LogicNP.EZShellExtensions.AutoPlayExtension.RegisterExtension(System.Type)">
            <summary>Registers the extension for use by the system.</summary>
            <remarks>Call this method in the function marked with the ComRegisterFunctionAttribute attribute in your project.</remarks>
            <param name="t">The type representing the autoplay extension class derived from  AutoPlayExtension.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.AutoPlayExtension.UnRegisterExtension(System.Type)">
            <summary>Unregisters the extension from the system</summary>
            <remarks>Call this method in the function marked with the ComUnRegisterFunctionAttribute attribute in your project.</remarks>
            <param name="t">The type representing the autoplay extension class derived from  AutoPlayExtension.</param>
        </member>
        <member name="T:LogicNP.EZShellExtensions.AutoPlayExtensionAttribute">
            <summary>Specifies properties of the  AutoPlayExtension.</summary>
            <remarks>Apply this attribute to a class derived from  AutoPlayExtension to specify the properties of the extension.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.AutoPlayExtensionAttribute.#ctor(System.String,System.String,System.String,System.String)">
            <summary>Initializes a new instance of a  AutoPlayExtensionAttribute class.</summary>
            <param name="action">The string which describes the action of the extension (for example, 'Play Video').</param>
            <param name="provider">The string which describes the provider of the above action(for example, 'using MyExtension').</param>
            <param name="eventHandler">The string which specifies the event which the extension listens for. Common events are defined in the  PreDefinedEventHandlers class.</param>
            <param name="defaultIcon">The string which specifies the icon to display next to the option. The string should specify the full path of an icon file ( for example, "c:\myaction.ico") or the full path of an exe/dll file and the resource/index of the icon within that file (for example, "c:\myextension.dll,1")</param>
        </member>
        <member name="T:LogicNP.EZShellExtensions.BandObject">
            <summary>Represents a base band object.  ToolBand,  DeskBand,  HorizontalExplorerBar and  VerticalExplorerBar classes derive from this class.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.BandObject.#ctor">
            <summary>Initializes a new instance of a  BandObject class.</summary>
            <returns>A BandObject</returns>
            <remarks>None.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.BandObject.GetWebBrowser">
            <summary>Gets the interface to the instance of Internet Explorer which is hosting the bandobject</summary>
            <returns>Object</returns>
            <remarks>    For a DeskBand, this method returns a null. For     horizontal explorer bars, vertical explorer bars and tool     bands, this method returns the IWebBrowser2     interface of the instance of Internet Explorer which is hosting     the band. This interface can then be used to interact with     Internet Explorer.     You can use the object returned by this method as follows     :     object o = this.GetWebBrowser();     if(o!=null)     {     object nullobj = null;     object url = "http://www.ssware.com";     WebBrowserClass wbc = (WebBrowserClass)     Marshal.CreateWrapperOfType(o,typeof(WebBrowserClass));     wbc.Navigate2(ref url,ref nullobj,ref nullobj,ref     nullobj,ref nullobj);     }     The IWebBrowser2 interface is defined in     ShDocVw.dll. Your project must add a reference     to "Microsoft Internet Controls" (ShDocVw.dll)     from the COM tab pf the 'Add Reference..' dialog box. The     interop assembly file generated - "Interop.ShDocVw.dll" -     should be given a strong name and be placed in the GAC.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.BandObject.IntegralSize">
            <summary>Gets or sets the horizontal or vertical step by which the width or height changes when the user is resizing the band object.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.BandObject.MaxSize">
            <summary>Gets or sets the maximum size of the band object</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.BandObject.MinSize">
            <summary>Gets or sets the minimum size of the band object.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.BandObject.Text">
            <summary>Gets or sets the text of the band object.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="T:LogicNP.EZShellExtensions.BandObjectInfoAttribute">
            <summary>Specifies various properties of band objects.</summary>
            <remarks>Apply this attribute to a class derived from  ToolBand,  DeskBand,  HorizontalExplorerBar or  VerticalExplorerBar to specify the properties of the band object.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.BandObjectInfoAttribute.#ctor(System.String,System.String,System.String)">
            <summary>Initializes a new instance of a  BandObjectInfoAttribute class</summary>
            <remarks>None.</remarks>
            <returns>A BandObjectInfoAttribute</returns>
        </member>
        <member name="P:LogicNP.EZShellExtensions.BandObjectInfoAttribute.HelpText">
            <summary>Gets or sets the description of the band object.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.BandObjectInfoAttribute.MenuText">
            <summary>Gets or sets the name of the band object as displayed to the user for selection.</summary>
            <remarks>None</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.BandObjectInfoAttribute.Title">
            <summary>Gets or sets the title of the band object.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="T:LogicNP.EZShellExtensions.BrowserHelperObject">
            <summary>Represents a browser helper object. To develop your own browser helper object, derive a new class from this class and override the appropriate methods.</summary>
            <remarks>Browser Helper Objects are extensions to Microsoft Internet Explorer which are loaded each time it starts up. Such objects can be used to extend the capabilities of the browser and can perform any actions such as detecting the browser's typical events, such as GoBack, GoForward, and DocumentComplete; access the browser's menu and toolbar and make changes; and create windows to display additional information on the currently viewed page.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.BrowserHelperObject.#ctor">
            <summary>Initializes a new instance of the  BrowserHelperObject class.</summary>
            <remarks>None.</remarks>
            <returns>A BrowserHelperObject</returns>
        </member>
        <member name="M:LogicNP.EZShellExtensions.BrowserHelperObject.GetBrowserHelperObjectInfo">
            <summary>Called to retrieve registration information about the browser helper object.</summary>
            <returns>BrowserHelperObjectInfo</returns>
            <remarks>This method is called when you register or unregister the browser helper object using the  RegisterExtension and  UnRegisterExtension methods..</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.BrowserHelperObject.GetWebBrowser">
            <summary>Gets the interface to the instance of Internet Explorer which is hosting the browser helper object.</summary>
            <returns>Object</returns>
            <remarks>    This method returns the IWebBrowser2 interface of the     instance of Internet Explorer which is hosting the browser     helper object. This interface can then be used to interact with     Internet Explorer.     You can use the object returned by this method as follows     :     object o = this.GetWebBrowser();     if(o!=null)     {      object nullobj = null;      object url =     "http://www.ssware.com";      WebBrowserClass wbc = (WebBrowserClass)     Marshal.CreateWrapperOfType(o,typeof(WebBrowserClass));      wbc.Navigate2(ref url,ref nullobj,      ref nullobj,ref nullobj,ref nullobj);     }     The IWebBrowser2 interface is defined in     ShDocVw.dll. Your project must add a reference     to "Microsoft Internet Controls" (ShDocVw.dll)     from the COM tab pf the 'Add Reference..' dialog box. The     interop assembly file generated - "Interop.ShDocVw.dll" -     should be given a strong name and be placed in the GAC.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.BrowserHelperObject.OnExecuteCommand">
            <summary>Called when a browser helper object of type menu item or toolbar item is clicked.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.BrowserHelperObject.OnLoad">
            <summary>Called after the browser helper object is loaded and initialized by Internet Explorer.</summary>
            <returns>None.</returns>
            <remarks>None.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.BrowserHelperObject.OnUnload">
            <summary>Called when the browser helper object is about to be unloaded by Internet Explorer.</summary>
            <remarks>None.</remarks>
            <returns>None.</returns>
        </member>
        <member name="M:LogicNP.EZShellExtensions.BrowserHelperObject.RegisterExtension(System.Type)">
            <summary>Registers the browser helper object for use by Internet Explorer.</summary>
            <returns>None.</returns>
            <remarks>Call this method in the function marked with the ComRegisterFunctionAttribute attribute in your project.</remarks>
            <param name="t">The type representing the browser helper object class derived from  BrowserHelperObject.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.BrowserHelperObject.UnRegisterExtension(System.Type)">
            <summary>Unregisters the browser helper object from Internet Explorer.</summary>
            <remarks>Call this method in the function marked with the ComUnregisterFunctionAttribute attribute in your project.</remarks>
            <returns>None.</returns>
            <param name="t">The type representing the browser helper object class derived from  BrowserHelperObject.</param>
        </member>
        <member name="T:LogicNP.EZShellExtensions.BrowserHelperObjectInfo">
            <summary>Provides registration information about the browser helper object.</summary>
            <remarks>This class is used as the return type of the  GetBrowserHelperObjectInfo method of  BrowserHelperObject class.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.BrowserHelperObjectInfo.#ctor(LogicNP.EZShellExtensions.BrowserHelperObjectType)">
            <summary>Initializes a new instance of the  BrowserHelperObjectInfo class .</summary>
            <returns>A BrowserHelperObjectInfo</returns>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.BrowserHelperObjectInfo.Caption">
            <summary>Gets/Sets the caption of the browser helper object.</summary>
            <remarks>This property is only used for the browser helper objects of types menu items or toolbar buttons.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.BrowserHelperObjectInfo.HotIconPath">
            <summary>Gets/Sets the full path of the icon file which will be used for display the hot icon for the toolbar button.</summary>
            <remarks>This property is only used for the browser helper objects of type toolbar button.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.BrowserHelperObjectInfo.IconPath">
            <summary>Gets/Sets the full path of the icon file which will be used for display the normal icon for the toolbar button.</summary>
            <remarks>This property is only used for the browser helper objects of type toolbar button.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.BrowserHelperObjectInfo.StatusBarText">
            <summary>Gets/Sets the text which will be displayed in the status bar of Internet Explorer when the user moves the mouse over the menu item or toolbar button.</summary>
            <remarks>This property is only used for the browser helper objects of types menu items or toolbar buttons.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.BrowserHelperObjectInfo.Type">
            <summary>Gets/Sets the type of the browser helper object.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="T:LogicNP.EZShellExtensions.ColumnExtension">
            <summary>Represents a column shell extension. To develop your own column extension, derive a new class from this class and override the appropriate methods.</summary>
            <remarks>The Details view in the Microsoft Windows Windows Explorer normally displays several standard columns. Each column lists information, such as the file size or type, for each file in the current folder. By implementing and registering a column extension, you can make custom columns available for display.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ColumnExtension.#ctor">
            <summary>Initializes a new instance of a  ColumnExtension class.</summary>
            <remarks>None.</remarks>
            <returns>A ColumnExtension</returns>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ColumnExtension.OnGetColumnInfo(LogicNP.EZShellExtensions.ColumnInfoEventArgs)">
            <summary>    NOTE: This method is superseded by the     OnGetColumnInfoEx method which should be used instead of this     method.     Called to retrieve information about the column that your     extension is providing.</summary>
            <returns>True if the column should be added; False otherwise.</returns>
            <remarks>Override this method to provide information about the column that you extension is providing.</remarks>
            <param name="e">The column information.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ColumnExtension.OnGetColumnInfoEx(LogicNP.EZShellExtensions.ColumnInfoEventArgs)">
            <summary>    Called to retrieve information about the columns that     your extension is providing.</summary>
            <returns>True if the column should be added to Windows Explorer; False if your extension provides no more columns corresponding to e.Index.</returns>
            <remarks>    If e.Index is greater than the number of columns you     provide, return False from this method. For other values, fill     e with your column information and return True.     For example, if your column extension provides 3 columns,     you should provide column information when e.Index is 0, 1 and     2 and return True. When this method is called with e.Index=3,     you should return false.</remarks>
            <param name="e">The column information. The e.Index property specifies the column index.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ColumnExtension.OnGetItemData(LogicNP.EZShellExtensions.ItemDataEventArgs)">
            <summary>    NOTE: This method is superseded by the     OnGetItemDataEx method which should be used instead of this     method.     Called to retrieve column data for each item.</summary>
            <returns>The column data for the item.</returns>
            <remarks>This method is called once for each item in the current folder. Override this method to provide column data for the item. The  Path property of  ItemDataEventArgs gives the full path of the item for which column data is being queried.</remarks>
            <param name="e">The information about the item for which column data is being queried.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ColumnExtension.OnGetItemDataEx(LogicNP.EZShellExtensions.ItemDataEventArgs)">
            <summary>Called to retrieve column data for each item.</summary>
            <returns>The column data for the item.</returns>
            <remarks>This method is called once for each item in the current folder. Override this method to provide column data for the item. The  Path property of  ItemDataEventArgs gives the full path of the item for which column data is being queried.</remarks>
            <param name="e">The information about the item for which column data is being queried. The e.Index value specifies the column for which the data is being requested.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ColumnExtension.OnInitialize">
            <summary>Called after the column extension has been initialized.</summary>
            <returns>    True to indicate that the column     extension provides a column for the current folder.     False to indicate that the column     extension does not provide any column for the current     folder.</returns>
            <remarks>Override this method to perform initialization tasks specific to your column extension. When this method is called, the  TargetFolder property contains a valid value specifying the full path of the folder for which the column extension is being loaded.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ColumnExtension.RegisterExtension(System.Type)">
            <summary>Registers the extension for use by the system.</summary>
            <returns>None.</returns>
            <remarks>Call this method in the function marked with the ComRegisterFunctionAttribute attribute in your project.</remarks>
            <param name="t">The type representing the column extension class derived from  ColumnExtension.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ColumnExtension.UnRegisterExtension(System.Type)">
            <summary>Unregisters the extension from the system</summary>
            <remarks>Call this method in the function marked with the ComUnRegisterFunctionAttribute attribute in your project.</remarks>
            <returns>None</returns>
            <param name="t">The type representing the column extension class derived from  ColumnExtension.</param>
        </member>
        <member name="P:LogicNP.EZShellExtensions.ColumnExtension.TargetFolder">
            <summary>Gets the folder for which the column is being displayed.</summary>
            <remarks>This property contains a valid value only after the  OnInitialize method is called.</remarks>
        </member>
        <member name="T:LogicNP.EZShellExtensions.ColumnInfoEventArgs">
            <summary>Provides data for the OnGetColumnInfo method of the ColumnExtension class.</summary>
            <remarks>An instance of this class is passed as a parameter to the     OnGetColumnInfo method. Typically, the  ColumnDescription,  ColumnJustification,  ColumnState and  ColumnTitle properties of this class are set to the appropriate values to provide information about the column.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ColumnInfoEventArgs.#ctor(System.Guid)">
            <summary>Initializes new instance of ColumnInfoEventArgs</summary>
            <returns>A ColumnInfoEventArgs</returns>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.ColumnInfoEventArgs.ColumnDescription">
            <summary>Gets or sets the description for the column.</summary>
            <remarks>The description is displayed to the user in the "Choose Columns.." dialog box in Windows Explorer.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.ColumnInfoEventArgs.ColumnJustification">
            <summary>Gets or sets the text justification of the column.</summary>
            <remarks>None</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.ColumnInfoEventArgs.ColumnState">
            <summary>Gets or sets the state of the column</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.ColumnInfoEventArgs.ColumnTitle">
            <summary>Gets or sets the title of the column.</summary>
            <remarks>The column title is the string displayed in the column header.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.ColumnInfoEventArgs.ColumnWidth">
            <summary>Gets or sets the approximate expected width(in characters) of the column.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.ColumnInfoEventArgs.Guid">
            <summary>Gets or sets the GUID of the column. This property along with the  PropertyID property together uniquely identify the column.</summary>
            <remarks>The default value of this property is the GUID associated with the type of class derived from  ColumnExtension.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.ColumnInfoEventArgs.PropertyID">
            <summary>Gets or sets the ID of the column. This property along with the  Guid property together uniquely identify the column.</summary>
            <remarks>The default value of this property is 0 and typically is not changed.</remarks>
        </member>
        <member name="T:LogicNP.EZShellExtensions.ContextMenuExtension">
            <summary>Represents a contextmenu shell extension. To develop your own contextmenu extension, derive a new class from this class and override the appropriate methods.</summary>
            <remarks>When a user right-clicks a file or folder, the Shell displays its context menu. For file system objects there are a number of standard items, such as Cut and Copy, that are on the menu by default. A context menu extension is an extension that adds commands to an existing context menu. Context menu extensions are associated with a particular file type and are called any time a context menu is displayed for a member of the type. By implementing and registering such a extension, you can dynamically add items to an object's context menu, customized for the particular object.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ContextMenuExtension.#ctor">
            <summary>Initializes a new instance of the  ContextMenuExtension class.</summary>
            <remarks>None.</remarks>
            <returns>A ContextMenuExtension</returns>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ContextMenuExtension.OnDrawMenuItem(LogicNP.EZShellExtensions.EZSDrawItemEventArgs)">
            <summary>Called when an owner drawn contextmenu item is to be drawn.</summary>
            <returns>None.</returns>
            <remarks>Override this method to draw any owner-draw menu items added by the contextmenu extension.</remarks>
            <param name="e">The data for the method. The  MenuItem property specifies the menu item which is to be drawn. The  Verb property identifies the menu item.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ContextMenuExtension.OnExecuteMenuItem(LogicNP.EZShellExtensions.ExecuteItemEventArgs)">
            <summary>Called when a contextmenu item is selected by the user.</summary>
            <remarks>Override this method to perform your own tasks when any of the menu items provided by your contextmenu extension is selected by the user.</remarks>
            <returns>True if the extension successfully executes the menu item; False otherwise. The default implementation returns false. Note that the OS may call this method for items which are not added by your extension, so this method should return true only if the menu item is supported by your extension and is successfully executed.</returns>
            <param name="e">The data for the method. The  MenuItem property specifies the menu item which is to be drawn. The  Verb property identifies the menu item.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ContextMenuExtension.OnGetMenuItems(LogicNP.EZShellExtensions.GetMenuitemsEventArgs)">
            <summary>Called when the menu items for your context menu extension should be added to the menu.</summary>
            <remarks>The  Menu property of the  GetMenuItemsEventArgs object identifies the menu to which menu items should be added.</remarks>
            <returns>None</returns>
            <param name="e">The data for the method.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ContextMenuExtension.OnInitialize">
            <summary>Called after the contextmenu extension has been initialized.</summary>
            <returns>Ignored.</returns>
            <remarks>Override this method to perform initialization tasks specific to your contextmenu extension. When this method is called, the  TargetFolder and  TargetFiles properties contains valid values.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ContextMenuExtension.OnInitializeEx(LogicNP.EZShellExtensions.Interop.IOleDataObject)">
            <returns>Boolean</returns>
            <remarks>None.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ContextMenuExtension.OnMeasureMenuItem(LogicNP.EZShellExtensions.EZSMeasureItemEventArgs)">
            <summary>Called to retrieve the dimensions of owner drawn contextmenu items.</summary>
            <remarks>Override this method to provide the dimensions for any owner drawn contextmenu items provided by your contextmenu extension.</remarks>
            <returns>None.</returns>
            <param name="e">The data for the method. The  MenuItem property specifies the menu item which is to be drawn. The Verb property identifies the menu item.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ContextMenuExtension.OnPopupSubMenu(LogicNP.EZShellExtensions.ShellMenuItem)">
            <summary>Called when a popup menu of the context menu is about to be initialized and shown.</summary>
            <param name="menuItem">The menu item which represents the popup menu that is about to be shown.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ContextMenuExtension.RegisterExtension(System.Type)">
            <summary>Registers the extension for use by the system.</summary>
            <returns>None.</returns>
            <remarks>Call this method in the function marked with the ComRegisterFunctionAttribute attribute in your project.</remarks>
            <param name="t">The type representing the contextmenu extension class derived from  ContextMenuExtension.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ContextMenuExtension.UnRegisterExtension(System.Type)">
            <summary>Unregisters the extension from the system.</summary>
            <remarks>Call this method in the function marked with the ComUnRegisterFunctionAttribute attribute in your project.</remarks>
            <returns>None.</returns>
            <param name="t">The type representing the contextmenu extension class derived from  ContextMenuExtension.</param>
        </member>
        <member name="P:LogicNP.EZShellExtensions.ContextMenuExtension.TargetFiles">
            <summary>Gets the array of strings representing the full path of the files/folders for which the context menu is being displayed.</summary>
            <remarks>This property contains a valid value only after the  OnInitialize method is called.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.ContextMenuExtension.TargetFolder">
            <summary>Gets the full path of the folder for which the context menu is being displayed.</summary>
            <remarks>This property contains a valid value only after the  OnInitialize method is called.</remarks>
        </member>
        <member name="T:LogicNP.EZShellExtensions.ControlPanelItem">
            <summary>Represents a control panel item. To develop your own control panel item, derive a new class from this class and override the appropriate methods.</summary>
            <remarks>This extension allows you to put your own items in the Control Panel. The  OnOpen virtual method is called when the item is double-clicked.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ControlPanelItem.#ctor">
            <summary>Initializes a new instance of the  ControlPanelItem class.</summary>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ControlPanelItem.GetTargetInfo">
            <summary>Called during registration and un-registration to retrieve information about the control panel item.</summary>
            <returns>A  ControlPanelItemInfo instance which represents information about the control panel item.</returns>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ControlPanelItem.OnOpen">
            <summary>Called when the control panel item is clicked.</summary>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ControlPanelItem.RegisterExtension(System.Type)">
            <summary>Registers the extension for use by the system.</summary>
            <remarks>Call this method in the function marked with the ComRegisterFunctionAttribute attribute in your project.</remarks>
            <param name="t">The type representing the contextmenu extension class derived from  ControlPanelItem.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ControlPanelItem.UnRegisterExtension(System.Type)">
            <summary>Unregisters the extension from the system.</summary>
            <remarks>Call this method in the function marked with the ComUnRegisterFunctionAttribute attribute in your project.</remarks>
            <param name="t">The type representing the contextmenu extension class derived from  ControlPanelItem.</param>
        </member>
        <member name="T:LogicNP.EZShellExtensions.ControlPanelItemInfo">
            <summary>Contains information about the control panel item.</summary>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ControlPanelItemInfo.#ctor">
            <summary>Initializes a new instance of the ControlPanelItemInfo class.</summary>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ControlPanelItemInfo.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the ControlPanelItemInfo class.</summary>
            <param name="displayName">The display name of the item as shown in the 'Control Panel'.</param>
            <param name="infoTip">The infotip for the control panel item.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ControlPanelItemInfo.#ctor(System.String,System.String,System.String)">
            <summary>Initializes a new instance of the ControlPanelItemInfo class.</summary>
            <param name="displayName">The display name of the item as shown in the 'Control Panel'.</param>
            <param name="infoTip">The infotip for the control panel item.</param>
            <param name="iconFile">    The "iconfile-iconindex" string that specifies the icon     shown for the control panel item.     Examples of valid strings are "shell32.dll,-100" or     "c:\mydll.dll,1".</param>
        </member>
        <member name="P:LogicNP.EZShellExtensions.ControlPanelItemInfo.DisplayName">
            <summary>Gets/Sets the display name of the item as shown in the 'Control Panel'.</summary>
        </member>
        <member name="P:LogicNP.EZShellExtensions.ControlPanelItemInfo.IconFile">
            <summary>Gets/Sets the "iconfile-iconindex" string that specifies the icon shown for the control panel item.</summary>
            <remarks>    Examples of valid strings are "shell32.dll,-100" or     "c:\mydll.dll,1".</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.ControlPanelItemInfo.InfoTip">
            <summary>    Gets/Sets the the infotip for the control panel     item.</summary>
        </member>
        <member name="T:LogicNP.EZShellExtensions.CopyHookExtension">
            <summary>Provides a base implementation of a copy hook extension. To develop your own copy hook extension, derive a new class from this class and override the appropriate methods.</summary>
            <remarks>    A copy hook extension allows you to control whether copy,     move, delete, or rename operations on folders take place. This     can be used to prevent critical folders from being moved,     renamed or deleted.     Whenever a folder is about to be copied, moved, deleted,     or renamed, the copy hook extension is called by the shell. If     the extension approve the operation, the shell performs the     operation. If the extension (or any other copy hook extension)     vetoes the operation, it is canceled. The extension is not     informed of the success or failure of the operation, so it     cannot be used to monitor file operations. The copy hook     extension works for folders only and not for files.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.CopyHookExtension.#ctor">
            <summary>Initializes a new instance of the  CopyHookExtension class.</summary>
            <returns>A CopyHookExtension</returns>
            <remarks>None.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.CopyHookExtension.OnShellOperation(LogicNP.EZShellExtensions.ShellOperationEventArgs)">
            <summary>Called when a user or application is about to perform a shell operation such as deleting, moving or copying a folder.</summary>
            <remarks>Override this method to perform your own tasks when a shell operation takes place. You can allow or disallow the shell operation by returning an appropriate value. The base class implementation simply allows all shell operations.</remarks>
            <returns>A  ShellOperationResult value which indicates whether to allow or disallow the shell operation.</returns>
            <param name="e">The data for the method.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.CopyHookExtension.RegisterExtension(System.Type)">
            <summary>Registers the extension for use by the system.</summary>
            <returns>None.</returns>
            <remarks>Call this method in the function marked with the ComRegisterFunctionAttribute attribute in your project.</remarks>
            <param name="t">The type representing the copy hook extension class derived from  CopyHookExtension.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.CopyHookExtension.UnRegisterExtension(System.Type)">
            <summary>Unregisters the extension from the system.</summary>
            <returns>None.</returns>
            <remarks>Call this method in the function marked with the ComUnRegisterFunctionAttribute attribute in your project.</remarks>
            <param name="t">The type representing the copy hook extension class derived from  CopyHookExtension.</param>
        </member>
        <member name="T:LogicNP.EZShellExtensions.DeskBand">
            <summary>Provides a base implementation for a taskbar band object. To develop your own taskbar band object, derive your own class from this class.</summary>
            <remarks>A desk band is basically a way to create a dockable window on the desktop. The user selects it by right-clicking the taskbar and selecting it from the Toolbars submenu. Initially, desk bands are docked on the taskbar. The user can then drag the desk band to the desktop, and it will appear as a normal window.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.DeskBand.#ctor">
            <summary>Initializes a new instance of the  DeskBand class.</summary>
            <returns>None</returns>
            <remarks>None</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.DeskBand.RegisterExtension(System.Type)">
            <summary>Registers the extension for use by the system.</summary>
            <returns>None.</returns>
            <remarks>Call this method in the function marked with the ComRegisterFunctionAttribute attribute in your project.</remarks>
            <param name="t">The type representing the desk band class derived from     DeskBand</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.DeskBand.UnRegisterExtension(System.Type)">
            <summary>Unregisters the extension from the system.</summary>
            <returns>None.</returns>
            <remarks>Call this method in the function marked with the ComUnRegisterFunctionAttribute attribute in your project.</remarks>
            <param name="t">The type representing the desk band class derived from     DeskBand.</param>
        </member>
        <member name="T:LogicNP.EZShellExtensions.DirBackgroundContextMenuExtension">
            <summary>Provides a base implementation of a directory background context menu extension. To develop your own extension, derive your own class from this class and override the appropriate methods.</summary>
            <remarks>The DirBackgroundContextMenuExtension allows you to add menu items to the context menu that is displayed when the empty space in the directory is right-clicked.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.DirBackgroundContextMenuExtension.#ctor">
            <summary>Initializes a new instance of the  DirBackgroundContextMenuExtension class.</summary>
            <returns>A DirBackgroundContextMenuExtension</returns>
            <remarks>None.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.DirBackgroundContextMenuExtension.RegisterExtension(System.Type)">
            <summary>Registers the extension for use by the system.</summary>
            <returns>None.</returns>
            <remarks>Call this method in the function marked with the ComRegisterFunctionAttribute attribute in your project.</remarks>
            <param name="t">The type representing the directory background contextmenu extension class derived from  DirBackgroundContextMenuExtension.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.DirBackgroundContextMenuExtension.UnRegisterExtension(System.Type)">
            <summary>Unregisters the extension from the system.</summary>
            <returns>None.</returns>
            <remarks>Call this method in the function marked with the ComUnRegisterFunctionAttribute attribute in your project.</remarks>
            <param name="t">The type representing the directory background contextmenu extension class derived from  DirBackgroundContextMenuExtension.</param>
        </member>
        <member name="T:LogicNP.EZShellExtensions.DiskCleanupExtension">
            <summary>Provides a base implementation of a disk cleanup extension. To develop your own disk cleanup extension, derive a new class from this class and override the appropriate methods.</summary>
            <remarks>    The disk cleanup manager is part of the operating system.     The selection and cleanup of unneeded files is done by the     individual disk cleanup extensions on the system. The user has     the option of enabling or disabling individual extensions by     selecting or clearing their check box in the disk cleanup     manager's user interface (UI).     Although Windows comes with a number of disk cleanup     extensions, they aren't designed to handle files produced by     other applications. Instead, the disk cleanup manager is     designed to be flexible and extensible by enabling any     developer to implement their own disk cleanup extension. Any     developer can extend the available disk cleanup services by     implementing and registering a disk cleanup extension.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.DiskCleanupExtension.#ctor">
            <summary>Initializes a new instance of the  DiskCleanupExtension class.</summary>
            <returns>A DiskCleanupExtension</returns>
            <remarks>None</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.DiskCleanupExtension.NotifyCleanupProgress(System.Int64,System.Int64)">
            <summary>Notifies the disk cleanup manager of the amount of progress that the disk cleanup extension has made in freeing disk space.</summary>
            <remarks>Call this method intermittently in the  OnDoDiskCleaup method to notify the disk cleanup manager of the amount of progress that the disk cleanup extension has made in freeing disk space.</remarks>
            <returns>Ignored.</returns>
            <param name="freedSpaceSoFar">The amount of space that has been freed so far.</param>
            <param name="spaceToFree">The additional amount of space that can be freed.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.DiskCleanupExtension.NotifyEstimationProgress(System.Int64)">
            <summary>Notifies the disk cleanup manager of the amount of progress that the disk cleanup extension has made in estimating freeable disk space.</summary>
            <returns>Boolean</returns>
            <remarks>Call this method intermittently in the  OnEstimateCleanableSpace method to notify the disk cleanup manager of the amount of progress that the disk cleanup extension has made in estimating freeable disk space.</remarks>
            <param name="estimatedCleanableSpaceSoFar">The current estimate of the amout of space that can be freed.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.DiskCleanupExtension.OnDisplaySettingsUI">
            <summary>Called when the user clicks the settings button in the disk cleanup manager.</summary>
            <returns>Boolean</returns>
            <remarks>Override this method to display your own UI to allow the user to change settings for your disk cleanup extension.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.DiskCleanupExtension.OnDoDiskCleanup">
            <summary>Called when the cleanup operation of the disk cleanup manager is started and your disk cleanup extension is selected by the user.</summary>
            <returns>Boolean</returns>
            <remarks>Override this method to perform cleanup tasks specific to your disk cleanup extension.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.DiskCleanupExtension.OnEstimateCleanableSpace">
            <summary>Called by the disk cleanup manager to retrieve an estimate of the disk space which can be freed by the disk cleanup extension.</summary>
            <returns>The estimate of the disk space that can be freed.</returns>
            <remarks>Override this method to return an estimate of the disk space which can be freed by the disk cleanup extension.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.DiskCleanupExtension.OnInitialize">
            <summary>Called after the disk cleanup extension has been initialized.</summary>
            <returns>Boolean</returns>
            <remarks>Override this method to perform initialization tasks specific to your disk cleanup extension. The  VolumeName property holds a valid value when this method is called but not before that.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.DiskCleanupExtension.OnUnload">
            <summary>Called when the disk cleanup extension is being unloaded.</summary>
            <remarks>Override this method to perform final tasks specific to your disk cleanup extension.</remarks>
            <returns>None</returns>
        </member>
        <member name="M:LogicNP.EZShellExtensions.DiskCleanupExtension.RegisterExtension(System.Type)">
            <summary>Registers the extension for use by the system.</summary>
            <returns>None.</returns>
            <remarks>Call this method in the function marked with the ComRegisterFunctionAttribute attribute in your project.</remarks>
            <param name="t">The type representing the disk cleanup extension class derived from  DiskCleanupExtension.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.DiskCleanupExtension.UnRegisterExtension(System.Type)">
            <summary>UnRegisters the extension from the system.</summary>
            <returns>None.</returns>
            <remarks>Call this method in the function marked with the ComUnRegisterFunctionAttribute attribute in your project.</remarks>
            <param name="t">The type representing the disk cleanup extension class derived from  DiskCleanupExtension.</param>
        </member>
        <member name="P:LogicNP.EZShellExtensions.DiskCleanupExtension.Description">
            <summary>Gets or sets the description of the disk cleanup extension.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.DiskCleanupExtension.DiskCleanupMode">
            <summary>Gets the mode in which the disk cleanup extension should operate.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.DiskCleanupExtension.DisplayName">
            <summary>Gets or sets the display name of the disk cleanup extension.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.DiskCleanupExtension.HasSettingsUI">
            <summary>Gets or sets whether the disk cleanup extensions has a UI for advanced settings.</summary>
            <remarks>None</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.DiskCleanupExtension.SettingsButtonText">
            <summary>Gets or sets the text displayed on the button which, when clicked, displays the settings UI.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.DiskCleanupExtension.VolumeName">
            <summary>Gets the disk volume ( eg : c:\ or d:\ ) on which the disk cleanup extension must operate.</summary>
            <remarks>String</remarks>
        </member>
        <member name="T:LogicNP.EZShellExtensions.DragDropEventArgs">
            <summary>Provides data for the various methods of the  DropExtension class.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.DragDropEventArgs.#ctor(LogicNP.EZShellExtensions.KeyStates,System.Int32,System.Int32,System.Windows.Forms.DragDropEffects)">
            <summary>Initializes new instance of  DragDropEventArgs class</summary>
            <returns>A DragDropEventArgs</returns>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.DragDropEventArgs.Effects">
            <summary>Gets the dragdrop effects.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.DragDropEventArgs.KeyStates">
            <summary>Gets the state of the Control, Shift and Alt keys and the mouse buttons.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.DragDropEventArgs.X">
            <summary>Gets the x coordinate of the mouse pointer.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.DragDropEventArgs.Y">
            <summary>Gets the y coordinate of the mouse pointer.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="T:LogicNP.EZShellExtensions.DragDropExtension">
            <summary>Provides a base implementation of a dragdrop extension. To develop your own dragdrop extension, derive a new class from this class and override the appropriate methods.</summary>
            <remarks>When a user right-clicks a Shell object to drag an object, a context menu is displayed when the user attempts to drop the object. A dragdrop extension is a contextmenu extension that can add items to this context menu.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.DragDropExtension.#ctor">
            <summary>Initializes a new instance of the  DragDropExtension class.</summary>
            <returns>A DragDropExtension object</returns>
            <remarks>None.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.DragDropExtension.RegisterExtension(System.Type)">
            <summary>Registers the extension for use by the system.</summary>
            <remarks>Call this method in the function marked with the ComRegisterFunctionAttribute attribute in your project.</remarks>
            <returns>None.</returns>
            <param name="t">The type representing the dragdrop extension class derived from  DragDropExtension.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.DragDropExtension.UnRegisterExtension(System.Type)">
            <summary>Unregisters the extension from the system.</summary>
            <remarks>Call this method in the function marked with the ComUnRegisterFunctionAttribute attribute in your project.</remarks>
            <returns>None.</returns>
            <param name="t">The type representing the dragdrop extension class derived from  DragDropExtension Class.</param>
        </member>
        <member name="T:LogicNP.EZShellExtensions.DropExtension">
            <summary>Provides a base implementation of a drop extension. To develop your own drop extension, derive a new class from this class and override the appropriate methods.</summary>
            <remarks>By default, files are not drop targets. You can make the members of a particular file class ( eg : *.bmp, *.cpp ) into drop targets using a drop extension. This extension is invoked whenever files or folders or other data are dragged or dropped over the members of the file class.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.DropExtension.#ctor">
            <summary>Initializes a new instance of a  DropExtension class.</summary>
            <remarks>None.</remarks>
            <returns>A DropExtension object</returns>
        </member>
        <member name="M:LogicNP.EZShellExtensions.DropExtension.OnDragDrop(LogicNP.EZShellExtensions.DragDropEventArgs)">
            <summary>Called when files or folders are dropped over the target file.</summary>
            <returns>DragDropEffects</returns>
            <remarks>Override this method to perform tasks specific to your drop extension when the drop occurs.</remarks>
            <param name="e">The data for the method.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.DropExtension.OnDragEnter(LogicNP.EZShellExtensions.DragDropEventArgs)">
            <summary>Called when files and folders are dragged over the target file for the first time during the dragdrop operation.</summary>
            <returns>A DragDropEffects value which specifies the result of the drag operation.</returns>
            <remarks>Override this method to perform tasks specific to your drop extension when files and folders are dragged over the target file for the first time during the dragdrop operation.</remarks>
            <param name="e">The data for the method.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.DropExtension.OnDragLeave">
            <summary>Called when dragged files are folders move out from over the target file.</summary>
            <remarks>Override this method to perform tasks specific to your drop extension when dragged files are folders move out from over the target file.</remarks>
            <returns>None.</returns>
        </member>
        <member name="M:LogicNP.EZShellExtensions.DropExtension.OnDragOver(LogicNP.EZShellExtensions.DragDropEventArgs)">
            <summary>Called when files or folders are dragged over the target file.</summary>
            <returns>DragDropEffects</returns>
            <remarks>Override this method to perform tasks specific to your drop extension when files or folders are dragged over the target file.</remarks>
            <param name="e">The data for the method.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.DropExtension.OnInitialize">
            <summary>Called when the drop extension is initialized.</summary>
            <returns>Ignored.</returns>
            <remarks>The  Files and  TargetFile properties are valid during and after this method, but not before that.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.DropExtension.RegisterExtension(System.Type)">
            <summary>Registers the extension for use by the system.</summary>
            <remarks>Call this method in the function marked with the ComRegisterFunctionAttribute attribute in your project.</remarks>
            <returns>None.</returns>
            <param name="t">The type representing the drop extension class derived from  DropExtension.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.DropExtension.UnRegisterExtension(System.Type)">
            <summary>Unregisters the extension from the system.</summary>
            <returns>None.</returns>
            <remarks>Call this method in the function marked with the ComUnRegisterFunctionAttribute attribute in your project.</remarks>
            <param name="t">The type representing the drop extension class derived from  DropExtension.</param>
        </member>
        <member name="P:LogicNP.EZShellExtensions.DropExtension.Files">
            <summary>Gets the array of strings representing the full path of the files and folders that are being dragged or dropped.</summary>
            <remarks>This property is valid when the  OnInitialize method is called but not before that.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.DropExtension.TargetFile">
            <summary>Gets the file over which the drag or drop operation is taking place.</summary>
            <remarks>This property is valid when the  OnInitialize method is called but not before that.</remarks>
        </member>
        <member name="T:LogicNP.EZShellExtensions.ExecuteItemEventArgs">
            <summary>Provides data for the  OnExecuteMenuItem method of  ContextMenuExtension.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ExecuteItemEventArgs.#ctor(LogicNP.EZShellExtensions.ShellMenuItem,LogicNP.EZShellExtensions.ExecuteMenuItemFlags,System.IntPtr,LogicNP.EZShellExtensions.InvokeCommandMask)">
            <summary>Initializes a new instance of a  ExecuteItemEventArgs class.</summary>
            <returns>A ExecuteItemEventArgs object</returns>
            <remarks>None</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.ExecuteItemEventArgs.Flags">
            <summary>Gets the flags/settings in effect when the OnExecuteMenuItem method is called.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.ExecuteItemEventArgs.HWnd">
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.ExecuteItemEventArgs.MenuItem">
            <remarks>None.</remarks>
        </member>
        <member name="T:LogicNP.EZShellExtensions.EZSDrawItemEventArgs">
            <remarks>None.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.EZSDrawItemEventArgs.#ctor(LogicNP.EZShellExtensions.ShellMenuItem,System.Drawing.Graphics,System.Drawing.Font,System.Drawing.Rectangle,System.Windows.Forms.DrawItemState)">
            <summary>Initializes new instance of  EZSDrawItemEventArgs class</summary>
            <returns>A EZSDrawItemEventArgs object</returns>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.EZSDrawItemEventArgs.MenuItem">
            <remarks>None.</remarks>
        </member>
        <member name="T:LogicNP.EZShellExtensions.EZSMeasureItemEventArgs">
            <remarks>None.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.EZSMeasureItemEventArgs.#ctor(LogicNP.EZShellExtensions.ShellMenuItem,System.Drawing.Graphics,System.Int32,System.Int32)">
            <summary>Initializes new instance of  EZSMeasureItemEventArgs class</summary>
            <remarks>None.</remarks>
            <returns>A EZSMeasureItemEventArgs object</returns>
        </member>
        <member name="P:LogicNP.EZShellExtensions.EZSMeasureItemEventArgs.MenuItem">
            <remarks>None.</remarks>
        </member>
        <member name="T:LogicNP.EZShellExtensions.GetIconsEventArgs">
            <summary>Provides data for the OnGetIcons method of the  IconExtension class.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.GetIconsEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>Initializes new instance of EZSMeasureItemEventArgs class</summary>
            <returns>A GetIconsEventArgs object</returns>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.GetIconsEventArgs.HLargeIcon">
            <summary>Gets or sets the handle to the large icon</summary>
            <remarks>The handle is owned by the system and it is not your responsibility to free the associated icon.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.GetIconsEventArgs.HSmallIcon">
            <summary>Gets or sets the handle to the small icon</summary>
            <remarks>The handle is owned by the system and it is not your responsibility to free the associated icon.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.GetIconsEventArgs.LargeIconSize">
            <summary>Gets the width and height of the large icon.</summary>
            <remarks>The supplied large icon must have the specified dimensions.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.GetIconsEventArgs.SmallIconSize">
            <summary>Gets the width and height of the small icon.</summary>
            <remarks>The supplied small icon must have the specified dimensions.</remarks>
        </member>
        <member name="T:LogicNP.EZShellExtensions.GetMenuitemsEventArgs">
            <summary>Provides data for the  GetMenuItems method of  ContextMenuExtension.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.GetMenuitemsEventArgs.#ctor(LogicNP.EZShellExtensions.ShellMenu,LogicNP.EZShellExtensions.QueryContextMenuFlags,System.Int32,System.Int32)">
            <summary>Initializes new instance of  GetMenuitemsEventArgs class</summary>
            <returns>A GetMenuitemsEventArgs object</returns>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.GetMenuitemsEventArgs.Flags">
            <summary>Specifies what type of menu items to retrieve.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.GetMenuitemsEventArgs.MaxMenuItemsAvailable">
            <summary>Specifies the maximum number of menu items that can be added to the menu.</summary>
        </member>
        <member name="P:LogicNP.EZShellExtensions.GetMenuitemsEventArgs.Menu">
            <summary>Gets the menu to which menu items should be added.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.GetMenuitemsEventArgs.ReservedMenuItemCount">
            <summary>Gets or sets the number of menu items that will be added later in the  OnPopupSubMenu method.</summary>
            <remarks>    This property is for advanced use only.     It is not necessary to add all menu items in the          OnGetMenuItems method. This property can be used to reserve     space for additional sub menu items which can be added later in     the          OnPopupSubMenu method. Note that only sub menu items can be     added later. All items in the main menu must be added in the          OnGetMenuItems method.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.GetMenuitemsEventArgs.StartIndex">
            <summary>Specifies the 0-based position in the menu where the menu items will be added.</summary>
            <remarks>    This property is for advanced use only.     Menu items are automatically added at the position     indicated by StartIndex.</remarks>
        </member>
        <member name="T:LogicNP.EZShellExtensions.GetThumbnailEventArgs">
            <summary>Provides data for the  OnGetThumbnail method of  ThumbnailProvider class.</summary>
        </member>
        <member name="P:LogicNP.EZShellExtensions.GetThumbnailEventArgs.AlphaChannel">
            <summary>Gets or sets whether the returned thumbnail has an alpha channel.</summary>
        </member>
        <member name="P:LogicNP.EZShellExtensions.GetThumbnailEventArgs.Width">
            <summary>Gets the width which the returned thumbnail should have.</summary>
        </member>
        <member name="T:LogicNP.EZShellExtensions.HorizontalExplorerBar">
            <summary>Provides a base implementation for a horizontal explorer bar band object. To develop your own horizontal explorer bar band object, derive your own class from this class.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.HorizontalExplorerBar.#ctor">
            <summary>Initializes new instance of  HorizontalExplorerBar class</summary>
            <returns>A HorizontalExplorerBar object</returns>
            <remarks>None</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.HorizontalExplorerBar.RegisterExtension(System.Type)">
            <summary>Registers the extension for use by the system.</summary>
            <remarks>Call this method in the function marked with the ComRegisterFunctionAttribute attribute in your project.</remarks>
            <returns>None.</returns>
            <param name="t">The type representing the horizontal explorer bar class derived from  HorizontalExplorerBar.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.HorizontalExplorerBar.UnRegisterExtension(System.Type)">
            <summary>Unregisters the extension from the system.</summary>
            <remarks>Call this method in the function marked with the ComUnRegisterFunctionAttribute attribute in your project.</remarks>
            <returns>None.</returns>
            <param name="t">The type representing the horizontal explorer bar class derived from  HorizontalExplorerBar.</param>
        </member>
        <member name="T:LogicNP.EZShellExtensions.IconExtension">
            <summary>Provides a base implementation of an icon extension. To develop your own icon extension, derive your own class from this class and override the appropriate methods.</summary>
            <remarks>A file class often has a custom icon associated with it, to make its members easily recognizable in Microsoft Windows Explorer. An icon extension is a type of Shell extension that allows you to dynamically assign icons to the members of a file class. Every time a file from the class is displayed, the Shell queries the extension for the appropriate icon. An icon extension can assign different icons to different members of the class, or vary the icon based on the current state of the file.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.IconExtension.#ctor">
            <summary>Initializes a new instance of the  IconExtension class.</summary>
            <remarks>None.</remarks>
            <returns>A IconExtension object</returns>
        </member>
        <member name="M:LogicNP.EZShellExtensions.IconExtension.OnGetIconFileAndIndex(LogicNP.EZShellExtensions.IconFileAndIndexEventArgs)">
            <summary>Called when the  IconExtractMode is set to IconFileAndIndex to retrieve the icon for the target file.</summary>
            <remarks>Override this method to provide the icons to the shell by specifying the full path to an exe, dll or ico file and index of the icon within that file.</remarks>
            <returns>Boolean</returns>
            <param name="e">The data for the method.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.IconExtension.OnGetIcons(LogicNP.EZShellExtensions.GetIconsEventArgs)">
            <summary>Called when the  IconExtractMode is set to Icons to retrieve the icon for the target file.</summary>
            <returns>Boolean</returns>
            <remarks>Override this method to provide the icons to the shell by returning the handles to the large and small icons.</remarks>
            <param name="e">The data for the method.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.IconExtension.OnInitialize">
            <summary>Called after the icon extension is initialized.</summary>
            <returns>Ignored</returns>
            <remarks>Override this method to perform initialization tasks specific to your icon extension. The  TargetFile property is valid during and after this method, but not before that.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.IconExtension.RegisterExtension(System.Type)">
            <summary>Registers the extension for use by the system.</summary>
            <returns>None.</returns>
            <remarks>Call this method in the function marked with the ComRegisterFunctionAttribute attribute in your project.</remarks>
            <param name="t">The type representing the icon extension class derived from  IconExtension.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.IconExtension.UnRegisterExtension(System.Type)">
            <summary>Unregisters the extension from the system.</summary>
            <remarks>Call this method in the function marked with the ComUnRegisterFunctionAttribute attribute in your project.</remarks>
            <returns>None.</returns>
            <param name="t">The type representing the icon extension class derived from  IconExtension.</param>
        </member>
        <member name="P:LogicNP.EZShellExtensions.IconExtension.IconExtractMode">
            <summary>Gets or sets the method by which icons are provided to the shell by this extension.</summary>
            <remarks>Icons can be provided to the shell using either fully qualified paths to exe,dll or ico files or by providing actual handles to icons.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.IconExtension.TargetFile">
            <summary>Gets the full path of the file for which the icon is being requested by the shell.</summary>
            <remarks>This property is valid during and after the  OnInitialize method, but not before that.</remarks>
        </member>
        <member name="T:LogicNP.EZShellExtensions.IconFileAndIndexEventArgs">
            <summary>Provides data for the OnGetIconFileAndIndex method of the IconExtension class.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.IconFileAndIndexEventArgs.#ctor">
            <summary>Initializes a new instance of the  IconFileAndIndexEventArgs class.</summary>
            <returns>A IconFileAndIndexEventArgs object</returns>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.IconFileAndIndexEventArgs.IconFile">
            <summary>Gets or sets the full path of exe, dll or ico file which contains the icon.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.IconFileAndIndexEventArgs.IconIndex">
            <summary>Gets or sets the index of the icon within the file specified by the  IconFile property.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="T:LogicNP.EZShellExtensions.InfoTipExtension">
            <summary>Provides a base implementation of an infotip extension. To develop your own infotip extension, derive your own class from this class and override the appropriate methods.</summary>
            <remarks>Whenever the mouse is moved over a file or folder in Windows Explorer, the shell displays a short infotip. This extension can be used to provide the data that is displayed by the shell when the mouse is moved over the appropriate file.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.InfoTipExtension.#ctor">
            <summary>Initializes a new instance of the  IconFileAndIndexEventArgs class.</summary>
            <returns>A InfoTipExtension object</returns>
            <remarks>None.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.InfoTipExtension.OnGetInfoTip">
            <summary>Called when the infotip for the target file is to be retrieved.</summary>
            <returns>String</returns>
            <remarks>Override this method to provide your own infotip.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.InfoTipExtension.OnInitialize">
            <summary>Called when the infotip extension is initialized.</summary>
            <returns>True to show the infotip for the file using this extension; false to show the system default infotip (if any).</returns>
            <remarks>Override this method to perform initialization tasks specific to your infotip extension.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.InfoTipExtension.RegisterExtension(System.Type)">
            <summary>Registers the extension for use by the system.</summary>
            <remarks>Call this method in the function marked with the ComRegisterFunctionAttribute attribute in your project.</remarks>
            <returns>None.</returns>
            <param name="t">The type representing the infotip extension class derived from  InfoTipExtension.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.InfoTipExtension.UnRegisterExtension(System.Type)">
            <summary>Unregisters the extension from the system.</summary>
            <remarks>Call this method in the function marked with the ComUnRegisterFunctionAttribute attribute in your project.</remarks>
            <returns>None.</returns>
            <param name="t">The type representing the infotip extension class derived from  InfoTipExtension Class.</param>
        </member>
        <member name="P:LogicNP.EZShellExtensions.InfoTipExtension.TargetFile">
            <summary>Gets the full path of the file for which the infotip is being displayed.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="T:LogicNP.EZShellExtensions.ItemDataEventArgs">
            <summary>Provides data for the  OnGetItemData method of the  ColumnExtension class.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ItemDataEventArgs.#ctor(System.IO.FileAttributes,System.String,System.String)">
            <summary>Initializes a new instance of the  ItemDataEventArgs class.</summary>
            <returns>A ItemDataEventArgs object</returns>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.ItemDataEventArgs.Attributes">
            <summary>Gets the attributes of the item.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.ItemDataEventArgs.Extension">
            <summary>Gets the extension of the item.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.ItemDataEventArgs.Path">
            <summary>Gets the full path of the item.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="T:LogicNP.EZShellExtensions.OverlayIconExtension">
            <summary>Provides a base implementation of an overlay icon extension. To develop your own overlay icon extension, derive your own class from this class and override the appropriate methods.</summary>
            <remarks>    Icon overlays are small images placed at the lower-left     corner of the icon that represents a Shell object. They are     normally added to an object's icon to provide some extra     information. For instance, a commonly used icon overlay is the     small arrow that indicates that the icon represents a link,     rather than the actual file or folder. In addition to the     standard icon overlays that are provided by the system, you can     specify custom icon overlays for shell objects by implementing     an overlayicon extension.     Each overlay icon extension class can only provide one     overlay icon - this is a Windows defined limitation and not     that of EZShellExtensions. If you wish to provide multiple     overlay icons, implement multiple extensions (multiple classes     each derived from OverlayIconExtension - one for each overlay     icon).     Note: In TRIAL version, the overlay icon is only     shown randomly for files. To get it to display for a specific     file, hit Refresh in Windows Explorer till it shows for your     file. This behavior DOES NOT occur in the licensed     version.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.OverlayIconExtension.#ctor">
            <summary>Initializes a new instance of the  OverlayIconExtension class.</summary>
            <remarks>None.</remarks>
            <returns>A OverlayIconExtension object</returns>
        </member>
        <member name="M:LogicNP.EZShellExtensions.OverlayIconExtension.OnGetOverlayIconFileAndIndex(LogicNP.EZShellExtensions.IconFileAndIndexEventArgs)">
            <summary>Called to retrieve the full path of the exe, dll or ico file containing the overlay icon and the index of the overlay icon within the file.</summary>
            <returns>Boolean</returns>
            <remarks>Override this method to specify the full path of the exe, dll or ico file containing the overlay icon and the index of the overlay icon within the file.</remarks>
            <param name="e">The data for the method.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.OverlayIconExtension.OnGetPriority">
            <summary>Called to retrieve the priority of the overlay icon extension.</summary>
            <remarks>The returned value can be between 0 to 100. Higher values indicate higher priority. If more than one overlay icon is available for a file, the one with the higher priority takes precedence. When two or more overlay icon extensions are implemented, you can use this method to specify which of the two extensions takes precedence.</remarks>
            <returns>An integer which specifies the priority of the overlay icon provided by this extension. The default implementation returns 0.</returns>
        </member>
        <member name="M:LogicNP.EZShellExtensions.OverlayIconExtension.OnShouldDisplayOverlayIcon">
            <summary>Called to query whether the overlay icon should be displayed for the file specified by  TargetFile.</summary>
            <returns>Boolean</returns>
            <remarks>None.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.OverlayIconExtension.RegisterExtension(System.Type)">
            <summary>Registers the extension for use by the system.</summary>
            <remarks>Call this method in the function marked with the ComRegisterFunctionAttribute attribute in your project.</remarks>
            <returns>None.</returns>
            <param name="t">The type representing the overlayicon extension class derived from  OverlayIconExtension.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.OverlayIconExtension.UnRegisterExtension(System.Type)">
            <summary>Unregisters the extension from the system.</summary>
            <remarks>Call this method in the function marked with the ComUnRegisterFunctionAttribute attribute in your project.</remarks>
            <returns>None.</returns>
            <param name="t">The type representing the overlayicon extension class derived from  OverlayIconExtension.</param>
        </member>
        <member name="P:LogicNP.EZShellExtensions.OverlayIconExtension.TargetFile">
            <summary>Gets the full path of the target file for which the overlay icon is to be specified.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.OverlayIconExtension.TargetFileAttributes">
            <summary>Specifies the attributes of the file specified by the  TargetFile property.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="T:LogicNP.EZShellExtensions.PreDefinedEventHandlers">
            <summary>Provides strings for pre-defined media inserted event handlers.</summary>
            <remarks>The constants defined in this class can be used with  AutoPlayExtensionAttribute.</remarks>
        </member>
        <member name="T:LogicNP.EZShellExtensions.PreviewHandler">
            <summary>Provides a base implementation of a preview handler. To develop your own preview handler, derive your own class from this class and override the appropriate methods.</summary>
            <remarks>    Preview handlers are used to provide a a lightweight,     read-only preview of the file's contents in the view's     reading pane for files. The preview is shown when the file is     selected in Windows Explorer.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.PreviewHandler.#ctor">
            <summary>Initializes a new instance of the  PreviewHandler class.</summary>
            <returns>A  PreviewHandler object.</returns>
        </member>
        <member name="M:LogicNP.EZShellExtensions.PreviewHandler.OnInitialize">
            <summary>Called when the preview handler is initialized.</summary>
            <remarks>Override this method to perform initialization tasks specific to your preview handler extension.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.PreviewHandler.OnLoadPreview">
            <summary>Called when the preview is to be generated and displayed.</summary>
        </member>
        <member name="M:LogicNP.EZShellExtensions.PreviewHandler.OnUnloadPreview">
            <summary>Called when a preview is about to be hidden.</summary>
        </member>
        <member name="M:LogicNP.EZShellExtensions.PreviewHandler.RegisterExtension(System.Type)">
            <summary>Registers the extension for use by the system.</summary>
            <remarks>Call this method in the function marked with the ComRegisterFunctionAttribute attribute in your project.</remarks>
            <param name="t">The type representing the preview handler class derived from  PreviewHandler.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.PreviewHandler.UnRegisterExtension(System.Type)">
            <summary>Unregisters the extension from the system</summary>
            <remarks>Call this method in the function marked with the ComUnRegisterFunctionAttribute attribute in your project.</remarks>
            <param name="t">The type representing the preview handler class derived from  PreviewHandler.</param>
        </member>
        <member name="P:LogicNP.EZShellExtensions.PreviewHandler.TargetFile">
            <summary>Gets the full path of the target file for which the preview is to be generated.</summary>
            <remarks>This property returns a valid value only in or after the     OnInitialize method.</remarks>
        </member>
        <member name="T:LogicNP.EZShellExtensions.PreviewHandlerAttribute">
            <summary>Specifies properties of the  PreviewHandler.</summary>
            <remarks>Apply this attribute to a class derived from  PreviewHandler to specify the properties of the handler.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.PreviewHandlerAttribute.#ctor">
            <summary>Initializes a new instance of the  PreviewHandlerAttribute class.</summary>
        </member>
        <member name="M:LogicNP.EZShellExtensions.PreviewHandlerAttribute.#ctor(Microsoft.Win32.RegistryHive,System.String,System.String,System.String)">
            <summary>Initializes a new instance of the  PreviewHandlerAttribute class.</summary>
            <param name="root">             The root registry key under which registration of the         extension will be done.     </param>
            <param name="subKeyPath">             The subkey under the root key at which registration of         the extension will be done.     </param>
            <param name="name">The description/name of the preview handler.</param>
            <param name="appID">A unique GUID for the preview handler.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.PreviewHandlerAttribute.#ctor(System.String,System.Boolean,System.String,System.String)">
            <remarks>When specifying a ProgID, you can use constants defined in the  SpecialProgIDTargets class.</remarks>
            <param name="param">             The extension or ProgID that the shell extension to         which this attribute is applied targets.     </param>
            <param name="extension">             True if the param parameter indicates an extension,         False if it indicates a ProgID.     </param>
            <param name="name">The description/name of the preview handler.</param>
            <param name="appID">A unique GUID for the preview handler.</param>
        </member>
        <member name="T:LogicNP.EZShellExtensions.Property">
            <summary>Represents a property.</summary>
            <remarks>This is an abstract class and cannot be initialized. For system-defined properties, use the  SystemDefinedProperty class; for custom properties, use the  UserDefinedProperty class.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.Property.CanonicalName">
            <summary>Gets the unique canonical name of the property.</summary>
            <remarks>Examples of canonical names are "System.Authors" or "TxtFiles.NumLines".</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.Property.FmtID">
            <summary>Gets the format identifier (in GUID form) of the property.</summary>
            <remarks>    The FmtID and          PID properties together uniquely identify a     property.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.Property.PID">
            <summary>Gets the property identifier of the property.</summary>
            <remarks>    The          FmtID and PID properties together uniquely identify a     property.</remarks>
        </member>
        <member name="T:LogicNP.EZShellExtensions.PropertyHandler">
            <summary>Provides a base implementation of a property handler. To develop your own property handler, derive your own class from this class and override the appropriate methods.</summary>
            <remarks>Windows Vista displays the properties of a file at various places such as in the 'Details' pane, in columns, in infotips, etc. A property handler allows you to provide such information for files or folders.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.PropertyHandler.#ctor">
            <summary>Initializes a new instance of the  PropertyHandler class.</summary>
            <returns>A  PropertyHandler object.</returns>
        </member>
        <member name="M:LogicNP.EZShellExtensions.PropertyHandler.GetProperties">
            <summary>Gets the properties supported by the property handler.</summary>
            <returns>An array representing the properties supported by the property handler.</returns>
        </member>
        <member name="M:LogicNP.EZShellExtensions.PropertyHandler.GetPropertiesExtendedTileInfo">
            <summary>Gets the properties that should be displayed in the extended tile info view in Windows Explorer.</summary>
            <returns>An array representing the properties that should be displayed in the extended tile info view in Windows Explorer.</returns>
            <remarks>The properties returned by this method should be a subset of the properties returned by the  GetProperties method.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.PropertyHandler.GetPropertiesFullDetails">
            <summary>Gets the properties that should be displayed in the full details view in Windows Explorer.</summary>
            <remarks>The properties returned by this method should be a subset of the properties returned by the  GetProperties method.</remarks>
            <returns>An array representing the properties that should be displayed in the full details view in Windows Explorer.</returns>
        </member>
        <member name="M:LogicNP.EZShellExtensions.PropertyHandler.GetPropertiesInfoTip">
            <summary>Gets the properties that should be displayed in the infotip.</summary>
            <remarks>The properties returned by this method should be a subset of the properties returned by the  GetProperties method.</remarks>
            <returns>An array representing the properties that should be displayed in the infotip.</returns>
        </member>
        <member name="M:LogicNP.EZShellExtensions.PropertyHandler.GetPropertiesPreviewDetails">
            <summary>Gets the properties that should be displayed in the preview pane in Windows Explorer.</summary>
            <remarks>The properties returned by this method should be a subset of the properties returned by the  GetProperties method.</remarks>
            <returns>An array representing the properties that should be displayed in the preview pane in Windows Explorer.</returns>
        </member>
        <member name="M:LogicNP.EZShellExtensions.PropertyHandler.GetPropertiesPreviewTitle">
            <summary>Gets the properties that should be displayed in the preview title in Windows Explorer.</summary>
            <remarks>The properties returned by this method should be a subset of the properties returned by the  GetProperties method.</remarks>
            <returns>An array representing the properties that should be displayed in the preview title in Windows Explorer.</returns>
        </member>
        <member name="M:LogicNP.EZShellExtensions.PropertyHandler.GetPropertiesQuickTip">
            <summary>Gets the properties that should be displayed in the quick infotip.</summary>
            <remarks>The properties returned by this method should be a subset of the properties returned by the  GetProperties method.</remarks>
            <returns>An array representing the properties that should be displayed in the quick infotip.</returns>
        </member>
        <member name="M:LogicNP.EZShellExtensions.PropertyHandler.GetPropertiesTileInfo">
            <summary>Gets the properties that should be displayed in the extended tile info view in Windows Explorer.</summary>
            <remarks>The properties returned by this method should be a subset of the properties returned by the  GetProperties method.</remarks>
            <returns>An array representing the properties that should be displayed in the extended tile info view in Windows Explorer.</returns>
        </member>
        <member name="M:LogicNP.EZShellExtensions.PropertyHandler.GetPropertyDescriptionSchema">
            <summary>Returns a stream containing the description schema for the properties.</summary>
            <returns>A stream containing the description schema for the properties.</returns>
            <remarks>    This method is for advanced use only.     This method is used during the registration and     unregistration of the property handler. The default     implementation of this method creates a property descriptor     schema and returns it as a stream.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.PropertyHandler.GetPropertyValue(LogicNP.EZShellExtensions.Property)">
            <summary>Gets the value of the specified property.</summary>
            <returns>The value of the specified property.</returns>
            <remarks>If the specified property does not have any value, null should be returned.</remarks>
            <param name="property">The property whose value is to be retrieved.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.PropertyHandler.OnInitialize">
            <summary>Called when the property handler is initialized.</summary>
            <returns>True, if the handler was successfully initialized, false otherwise.</returns>
        </member>
        <member name="M:LogicNP.EZShellExtensions.PropertyHandler.RegisterExtension(System.Type)">
            <summary>Registers the extension for use by the system.</summary>
            <remarks>Call this method in the function marked with the ComRegisterFunctionAttribute attribute in your project.</remarks>
            <param name="t">The type representing the property handler class derived from  PropertyHandler.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.PropertyHandler.UnRegisterExtension(System.Type)">
            <summary>Unregisters the extension from the system</summary>
            <remarks>Call this method in the function marked with the ComUnRegisterFunctionAttribute attribute in your project.</remarks>
            <param name="t">The type representing the property handler class derived from  PropertyHandler.</param>
        </member>
        <member name="P:LogicNP.EZShellExtensions.PropertyHandler.TargetFile">
            <summary>Gets the full path of the file for which the properties are being retrieved.</summary>
            <remarks>This property returns a valid value only in or after the     OnInitialize method.</remarks>
        </member>
        <member name="T:LogicNP.EZShellExtensions.PropertySheetExtension">
            <summary>Provides a base implementation of a property sheet extension. To develop your own property sheet extension, derive your own class from this class and override the appropriate methods.</summary>
            <remarks>    When a user right-clicks a Shell object, the shortcut     menu that is displayed normally includes a     Properties item. Selecting that item launches     a property sheet that allows the user to view, and in some     cases modify, the object's properties. You can customize this     property sheet by implementing and registering a property sheet     extension.     Property sheet extensions can also be displayed in the     'My Computer properties' dialog box, 'Display Properties'     dialog box, 'Device Properties' dialog box, 'Mouse Properties'     dialog box and the 'Desktop Properties' dialog box. To add your     own property page to these dialog boxes, see the documentation     for          TargetExtensionAttribute and          PropertySheetExtensionTargets.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.PropertySheetExtension.Apply">
            <summary>Causes the property sheet to apply changes made to the pages in the sheet.</summary>
            <remarks>    This method is equivalent to the user clicking on the     'Apply' button of the property sheet.     This method returns True if all the     pages successfully applied changes made to them, otherwise     False.</remarks>
            <returns>boolean</returns>
        </member>
        <member name="M:LogicNP.EZShellExtensions.PropertySheetExtension.CancelToClose">
            <summary>Notifies the property sheet that the extension page has made changes which cannot be undone.</summary>
            <remarks>This method disables the Cancel button and changes the text of the OK button to "Close." Most property pages wait to perform irreversible changes until the apply button is clicked. However, in some circumstances, a property page may make irreversible changes before that; this method should be used in such circumstances.</remarks>
            <returns>None.</returns>
        </member>
        <member name="M:LogicNP.EZShellExtensions.PropertySheetExtension.Changed">
            <summary>Notifies the property sheet that the user has made changes to the property sheet.</summary>
            <remarks>When this method is called, the property sheet will enable the Apply button.</remarks>
            <returns>None.</returns>
        </member>
        <member name="M:LogicNP.EZShellExtensions.PropertySheetExtension.OnActivate">
            <summary>Called when the extension page is about to be activated and displayed.</summary>
            <returns>Return true to allow the page to be activated, false otherwise.</returns>
            <remarks>    This method is called before the extension page becomes     visible. The extension can use this notification to initialize     data/controls on the page.     The default implementation simply returns     true.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.PropertySheetExtension.OnApply">
            <summary>Called when the user presses the Apply,OK or Close button on the property sheet.</summary>
            <remarks>    When the user clicks the OK, Apply, or Close button, the          OnValidateChanges method for your extension page is called     if it is the current active page, giving it an opportunity to     validate the user's changes. If the method returns true, this     method is called, directing the extension to apply any changes     made.     The default implementation simply returns     NotifyResult.NoError.</remarks>
            <returns>One of the  NotifyResult values.</returns>
        </member>
        <member name="M:LogicNP.EZShellExtensions.PropertySheetExtension.OnCancel">
            <summary>Called when the property sheet is about to be destroyed.</summary>
            <remarks>The method is called when the user clicks the Cancel button, the 'X' button for the property sheet window or presses the Esc key.</remarks>
            <returns>None</returns>
        </member>
        <member name="M:LogicNP.EZShellExtensions.PropertySheetExtension.OnCreatePage">
            <summary>Called when the extension page is created.</summary>
            <returns>None</returns>
            <remarks>None</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.PropertySheetExtension.OnInitialize">
            <summary>Called when the property sheet extension is initialized.</summary>
            <returns>Boolean</returns>
            <remarks>Override this method to perform initialization tasks specific to your property sheet extension.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.PropertySheetExtension.OnInitializeEx(LogicNP.EZShellExtensions.Interop.IOleDataObject)">
            <returns>Boolean</returns>
            <remarks>None.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.PropertySheetExtension.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <remarks>None</remarks>
            <param name="pevent">None</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.PropertySheetExtension.OnQueryCancel">
            <summary>Called before the property sheet is about to be destroyed.</summary>
            <returns>Return true to allow the property sheet to be destroyed; false otherwise.</returns>
            <remarks>The method is called when the user clicks the Cancel button, the 'X' button for the property sheet window or presses the Esc key.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.PropertySheetExtension.OnShowHelp">
            <summary>Called when the user has clicked the Help button on the property sheet.</summary>
            <returns>None</returns>
            <remarks>None</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.PropertySheetExtension.OnValidateChanges">
            <summary>Called to validate changes made to the extension page.</summary>
            <returns>Return true if all changes made to the page are valid, false otherwise.</returns>
            <remarks>    This method is called when the extension page is about to     lose activation either because another page is being activated     or the user has clicked the OK button. If this method returns     false, then neither of these actions are     performed.     The default implementation simply returns     true.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.PropertySheetExtension.PressButton(LogicNP.EZShellExtensions.PropertySheetButton)">
            <summary>Simulates the pressing of the specified button.</summary>
            <param name="button">The button which is to be auto-pressed.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.PropertySheetExtension.RegisterExtension(System.Type)">
            <summary>Registers the extension for use by the system.</summary>
            <returns>None.</returns>
            <remarks>Call this method in the function marked with the ComRegisterFunctionAttribute attribute in your project.</remarks>
            <param name="t">The type representing the property sheet extension class derived from  PropertySheetExtension.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.PropertySheetExtension.RemovePage">
            <summary>Removes the page from the property sheet.</summary>
        </member>
        <member name="M:LogicNP.EZShellExtensions.PropertySheetExtension.Reset">
            <summary>Notifies the property sheet that the changes made to the extension page have been reset or undone.</summary>
            <remarks>The property sheet disables the Apply button if no other pages have registered changes with the property sheet.</remarks>
            <returns>None.</returns>
        </member>
        <member name="M:LogicNP.EZShellExtensions.PropertySheetExtension.UnRegisterExtension(System.Type)">
            <summary>Unregisters the extension from the system.</summary>
            <remarks>Call this method in the function marked with the ComUnRegisterFunctionAttribute attribute in your project.</remarks>
            <returns>None.</returns>
            <param name="t">The type representing the property sheet extension class derived from  PropertySheetExtension.</param>
        </member>
        <member name="P:LogicNP.EZShellExtensions.PropertySheetExtension.Icon">
            <summary>Gets or sets the icon that is displayed on the tab of the property sheet.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.PropertySheetExtension.ShowHelpButton">
            <summary>Gets or sets whether the Help button is displayed in the property sheet.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.PropertySheetExtension.TargetFiles">
            <summary>Gets the array of strings representing the full path of the files and folders for which the property sheet extension is being invoked.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.PropertySheetExtension.Text">
            <summary>Gets or sets the text that is displayed on the tab of the property sheet.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="T:LogicNP.EZShellExtensions.PropertySheetExtensionTargets">
            <summary>Provides common target strings for a property sheet extension.</summary>
            <remarks>Use the constant strings defined in this class when you want to target a property sheet extension for special dialog boxes such as the 'My Computer properties' dialog box, 'Display Properties' dialog box, 'Device Properties' dialog box, 'Mouse Properties' dialog box and the 'Desktop Properties' dialog box. Use these strings with this  TargetExtensionAttribute constructor.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.PropertySheetExtensionTargets.#ctor">
            <summary>Initializes a new instance of  PropertySheetExtensionTargets a class.</summary>
            <returns>A PropertySheetExtensionTargets object</returns>
            <remarks>None.</remarks>
        </member>
        <member name="F:LogicNP.EZShellExtensions.PropertySheetExtensionTargets.DesktopProperties">
            <summary>Value : "SOFTWARE\Microsoft\Windows\CurrentVersion\Controls Folder\Desk"</summary>
            <remarks>Targets the 'Desktop Properties' dialog box.</remarks>
        </member>
        <member name="F:LogicNP.EZShellExtensions.PropertySheetExtensionTargets.DeviceProperties">
            <summary>Value : "SOFTWARE\Microsoft\Windows\CurrentVersion\Controls Folder\Device"</summary>
            <remarks>Targets the 'Display Properties' dialog box.</remarks>
        </member>
        <member name="F:LogicNP.EZShellExtensions.PropertySheetExtensionTargets.DisplayProperties">
            <summary>Value : "SOFTWARE\Microsoft\Windows\CurrentVersion\Controls Folder\Display"</summary>
            <remarks>Targets the 'Display Properties' dialog box.</remarks>
        </member>
        <member name="F:LogicNP.EZShellExtensions.PropertySheetExtensionTargets.InternetOptions">
            <summary>Value : "SOFTWARE\Microsoft\Windows\CurrentVersion\Controls Folder\Internet"</summary>
            <remarks>Targets the 'Internet Options' dialog box.</remarks>
        </member>
        <member name="F:LogicNP.EZShellExtensions.PropertySheetExtensionTargets.KeyboardProperties">
            <summary>Value : "SOFTWARE\Microsoft\Windows\CurrentVersion\Controls Folder\Keyboard"</summary>
            <remarks>Targets the 'Keyboard Properties' dialog box.</remarks>
        </member>
        <member name="F:LogicNP.EZShellExtensions.PropertySheetExtensionTargets.MouseProperties">
            <summary>Value : "SOFTWARE\Microsoft\Windows\CurrentVersion\Controls Folder\Mouse"</summary>
            <remarks>Targets the 'Mouse Properties' dialog box.</remarks>
        </member>
        <member name="F:LogicNP.EZShellExtensions.PropertySheetExtensionTargets.PowerProperties">
            <summary>Value : "SOFTWARE\Microsoft\Windows\CurrentVersion\Controls Folder\PowerCfg"</summary>
            <remarks>Targets the 'Mouse Properties' dialog box.</remarks>
        </member>
        <member name="F:LogicNP.EZShellExtensions.PropertySheetExtensionTargets.SystemProperties">
            <summary>Value : "SOFTWARE\Microsoft\Windows\CurrentVersion\Controls Folder\System"</summary>
            <remarks>Targets the 'My Computer Properties' dialog box.</remarks>
        </member>
        <member name="T:LogicNP.EZShellExtensions.RegistryKeyNameAttribute">
            <summary>This attribute can be optionally applied to a shell extension to specify the registry key name which will be used when registering the shell extension.</summary>
            <remarks>    If this attribute is absent, then the class name of the     extension is used when registering the extension.     This attribute can be useful in the particular case of     property sheet extensions to control the order in which the     property extension pages appear. Windows displays the pages in     the order in which they appear in the Registry (alphabetical).     This attribute can be used to force the registry key to appear     at a particular position.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.RegistryKeyNameAttribute.#ctor(System.String)">
            <summary>Initializes a new instance of the  RegistryKeyNameAttribute class.</summary>
            <returns>A RegistryKeyNameAttribute object</returns>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.RegistryKeyNameAttribute.RegistryKeyName">
            <summary>Gets/Sets the registry key name which will be used during registration.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="T:LogicNP.EZShellExtensions.SendToDescriptionAttribute">
            <summary>This attribute is applied to a class derived from  SendToExtension to specify the description associated with the SendTo extension.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.SendToDescriptionAttribute.#ctor(System.String)">
            <summary>Initializes a new instance of the  SendToDescriptionAttribute class.</summary>
            <returns>A SendToDescriptionAttribute object</returns>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.SendToDescriptionAttribute.Description">
            <summary>Gets the description of the associated SendTo extension.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="T:LogicNP.EZShellExtensions.SendToExtension">
            <summary>Provides a base implementation of a SendTo extension. To develop your own SendTo extension, derive your own class from this class and override the appropriate methods.</summary>
            <remarks>When the user right clicks on a shell object, a shortcut menu is displayed. One of the items in this menu is a "Send To" popup menu. A SendTo extension allows you to add entries to this menu.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.SendToExtension.#ctor">
            <summary>Initializes a new instance of the  SendToExtension class.</summary>
            <remarks>None.</remarks>
            <returns>A SendToExtension object</returns>
        </member>
        <member name="M:LogicNP.EZShellExtensions.SendToExtension.OnDragEnter(LogicNP.EZShellExtensions.DragDropEventArgs)">
            <summary>Called when the SendTo menu is about to be displayed.</summary>
            <remarks>Override this method to control whether the entry corresponding to this SendTo extension is displayed in the "Send To" popup menu. If this method returns DragDropEffects.None, the entry is not displayed.</remarks>
            <returns>DragDropEffects</returns>
            <param name="e">The data for the method</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.SendToExtension.RegisterDefaultIcon(System.Type,System.String,System.Int32)">
            <summary>Registers an icon that is displayed next to the SendTo menu item added by this extension.</summary>
            <returns>None.</returns>
            <remarks>Call this method in the function marked with the ComRegisterFunctionAttribute attribute in your project.</remarks>
            <param name="t">The type of the class derived from  SendToExtension.</param>
            <param name="iconFile">The full path of the exe, dll or icon file.</param>
            <param name="iconIndex">The index of the icon within the icon file.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.SendToExtension.RegisterExtension(System.Type)">
            <summary>Registers the extension for use by the system.</summary>
            <returns>None.</returns>
            <remarks>Call this method in the function marked with the ComRegisterFunctionAttribute attribute in your project.</remarks>
            <param name="t">The type representing the infotip extension class derived from  SendToExtension</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.SendToExtension.UnRegisterExtension(System.Type)">
            <summary>Unregisters the extension from the system.</summary>
            <remarks>Call this method in the function marked with the ComUnRegisterFunctionAttribute attribute in your project.</remarks>
            <returns>None.</returns>
            <param name="t">The type representing the infotip extension class derived from  SendToExtension.</param>
        </member>
        <member name="T:LogicNP.EZShellExtensions.ShellExecuteHookExtension">
            <summary>Provides a base implementation of a ShellExecuteHook extension. To develop your own ShellExecuteHook extension, derive your own class from this class and override the appropriate methods.</summary>
            <remarks>    A ShellExecuteHook extension allows you to intercept     whenever programs or files are attempted to run by the user     from Windows Explorer, the 'Run' dialog box or by using the     ShellExecute/ShellExecuteEx API functions. By intercepting such     calls, you can provide the ability to recognize and execute     your own strings/files/programs or to modify the normal     execution.     WARNING : Faulty shell execute hook     extensions can prevent execution of normal programs on your     system. To prevent this from happening during development and     testing, always keep the registry editor (regedit.exe) open on     the following key :     HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\ShellExecuteHooks.     Under this key, delete the value with the same GUID as the GUID     of your derived class (specified using the Guid attribute).     Once this value is deleted, your hook will no longer get called     whenever a program runs. Once you make changes to your code,     you can again register the hook extension using     RegisterExtension.exe.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ShellExecuteHookExtension.#ctor">
            <summary>Initializes a new instance of the  ShellExecuteHookExtension class.</summary>
            <returns>A ShellExecuteHookExtension object</returns>
            <remarks>None.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ShellExecuteHookExtension.OnExecute(LogicNP.EZShellExtensions.ShellExecuteInfo)">
            <summary>Called whenever a program is attempted to run using the ShellExecute or ShellExecuteEx API functions ( used by Windows Explorer and 'Run' dialog box.</summary>
            <returns>A Boolean value which determines whether default processing should continue.</returns>
            <remarks>If this function returns true, normal execution continues. If this function returns false, normal execution for the object stops. To handle your own objects, recognize the object from the sei structure passed to this function, do the appropriate handling and then return false. To prevent execution of standard objects,simply return false from this function. You can also use this function to log executions and return true to allow normal processing.</remarks>
            <param name="sei">Information about the object being executed.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ShellExecuteHookExtension.RegisterExtension(System.Type)">
            <summary>Registers the extension for use by the system.</summary>
            <returns>None.</returns>
            <remarks>Call this method in the function marked with the ComRegisterFunctionAttribute attribute in your project.</remarks>
            <param name="t">The type representing the shellexecutehook extension class derived from  ShellExecuteHookExtension.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ShellExecuteHookExtension.UnRegisterExtension(System.Type)">
            <summary>Unregisters the extension from the system.</summary>
            <remarks>Call this method in the function marked with the ComUnRegisterFunctionAttribute attribute in your project.</remarks>
            <returns>None.</returns>
            <param name="t">The type representing the shellexecutehook extension class derived from  ShellExecuteHookExtension.</param>
        </member>
        <member name="T:LogicNP.EZShellExtensions.ShellMenu">
            <summary>Represents a context menu.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ShellMenu.AddItem">
            <summary>Adds a new menu item to the menu.</summary>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ShellMenu.AddItem(System.String)">
            <summary>Adds a new menu item with the specified caption to the end of the menu.</summary>
            <returns>The newly added menu item.</returns>
            <remarks>The  Verb and  HelpString properties of the menu item are set to the same value as the caption parameter.</remarks>
            <param name="caption">The caption for the menu item.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ShellMenu.AddItem(System.String,System.Int32)">
            <summary>Adds a new menu item with the specified caption and having the specified identifier.</summary>
            <returns>The newly added menu item.</returns>
            <remarks>The  Verb and  HelpString properties of the menu item are set to the same value as the caption parameter.</remarks>
            <param name="caption">The caption for the menu item.</param>
            <param name="id">The identifier for the menu item.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ShellMenu.AddItem(System.String,System.String,System.String)">
            <summary>Adds a new menu item with the specified caption, verb and helpstring to the end of the menu.</summary>
            <returns>The newly added menu item.</returns>
            <remarks>None.</remarks>
            <param name="caption">The caption for the menu item.</param>
            <param name="verb">The verb which uniquely identifies the menu item.</param>
            <param name="helpString">The descriptive help string for the menu item.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ShellMenu.AddItem(System.String,System.String,System.String,System.Int32)">
            <summary>Adds a new menu item with the specified caption, verb, helpstring and identifier to the end of the menu.</summary>
            <returns>The newly added menu item.</returns>
            <param name="caption">The caption for the menu item.</param>
            <param name="verb">The verb which uniquely identifies the menu item.</param>
            <param name="helpString">The descriptive help string for the menu item.</param>
            <param name="id">The identifier for the menu item.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ShellMenu.Getitem(System.Int32)">
            <summary>Gets the menu item at the specified index in the menu.</summary>
            <returns>ShellMenuItem</returns>
            <remarks>If the index is out of range, a null value is returned.</remarks>
            <param name="index">The index of the menu item that should be retrieved.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ShellMenu.GetItemFromID(System.Int32)">
            <summary>Gets the menu item with the specified ID.</summary>
            <returns>ShellMenuItem</returns>
            <remarks>If a menu item with the specified ID is not found, then a null value is returned.</remarks>
            <param name="id">The ID of the menu item that should be retrieved.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ShellMenu.InsertItem">
            <summary>Inserts a new menu item in the menu at the specified index.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ShellMenu.InsertItem(System.String,System.Int32)">
            <summary>Inserts a new menu item in the menu at the specified index and having the specified caption.</summary>
            <returns>The newly added menu item.</returns>
            <remarks>The  Verb and  HelpString properties of the menu item are set to the same value as the caption parameter.</remarks>
            <param name="caption">The caption for the menu item.</param>
            <param name="index">The index where the new menu item should be added.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ShellMenu.InsertItem(System.String,System.Int32,System.Int32)">
            <summary>Inserts a new menu item in the menu at the specified index and having the specified caption and identifier.</summary>
            <returns>The newly added menu item.</returns>
            <remarks>The  Verb and  HelpString properties of the menu item are set to the same value as the caption parameter.</remarks>
            <param name="caption">The caption for the menu item.</param>
            <param name="index">The index where the new menu item should be added.</param>
            <param name="id">The identifier for the menu item.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ShellMenu.InsertItem(System.String,System.String,System.String,System.Int32)">
            <summary>Adds a new menu item to the menu at the specified index and having the specified caption, verb and helpstring.</summary>
            <returns>The newly added menu item.</returns>
            <remarks>None.</remarks>
            <param name="caption">The caption for the menu item.</param>
            <param name="verb">The verb which uniquely identifies the menu item.</param>
            <param name="helpString">The descriptive help string for the menu item.</param>
            <param name="index">The index where the new menu item should be added.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ShellMenu.InsertItem(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>Adds a new menu item to the menu at the specified index and having the specified caption, verb, helpstring and identifier.</summary>
            <returns>The newly added menu item.</returns>
            <param name="caption">The caption for the menu item.</param>
            <param name="verb">The verb which uniquely identifies the menu item.</param>
            <param name="helpString">The descriptive help string for the menu item.</param>
            <param name="index">The index where the new menu item should be added.</param>
            <param name="id">The identifier for the menu item.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ShellMenu.RemoveAll">
            <summary>Removes all menu items from the menu.</summary>
            <returns>None.</returns>
            <remarks>None.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ShellMenu.RemoveItem(System.Int32)">
            <summary>Removes the menu item at the specified index in the menu.</summary>
            <remarks>None.</remarks>
            <returns>None.</returns>
            <param name="index">The index of the menu item that should be removed.</param>
        </member>
        <member name="P:LogicNP.EZShellExtensions.ShellMenu.ItemCount">
            <summary>Gets the number of menu items that the menu contains.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="T:LogicNP.EZShellExtensions.ShellMenuItem">
            <summary>Represents a menu item in a context menu.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ShellMenuItem.#ctor(LogicNP.EZShellExtensions.ShellMenu,System.String,System.String,System.String,System.Int32)">
            <summary>Initializes a new instance of the  ShellMenuItem class.</summary>
            <returns>A ShellMenuItem object</returns>
            <remarks>None.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ShellMenuItem.SetBitmap(System.Drawing.Bitmap)">
            <summary>Displays the specified bitmap for the menu item.</summary>
            <param name="bitmap">The bitmap to display for the menu item.</param>
        </member>
        <member name="P:LogicNP.EZShellExtensions.ShellMenuItem.BarBreak">
            <summary>Gets or sets a value indicating whether the menu item is placed on a new line (for a menu item added to a frame menu ) or in a new column (for a menu item added to a context menu).</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.ShellMenuItem.Break">
            <summary>Gets or sets a value indicating whether the menu item is placed on a new line (for a menu item added to a frame menu) or in a new column (for a menu item added to a context menu).</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.ShellMenuItem.Caption">
            <summary>Gets/sets the caption for the menu item.</summary>
            <remarks>None</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.ShellMenuItem.Checked">
            <summary>Gets or sets a value indicating whether a check mark appears next to the caption of the menu item.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.ShellMenuItem.DefaultItem">
            <summary>Gets or sets a value indicating whether the menu item is the default menu item.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.ShellMenuItem.Enabled">
            <summary>Gets or sets a value indicating whether the menu item is enabled.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.ShellMenuItem.HasSubMenu">
            <summary>Gets/sets whether the menu item has a sub-menu.</summary>
            <remarks>    If this property is set to True, the menu item is     converted into a popup menu item. The          SubMenu property can then be used to add sub-menu     items.     If this property is set to False, the popup-menu (if any)     of the item is destroyed.     This property can be queried to determine whether the     menu item is a popup menu and contains sub-menu items.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.ShellMenuItem.HelpString">
            <summary>Gets/sets the descriptive help string for the menu item.</summary>
            <remarks>The help string is displayed by Windows Explorer in the status bar when the menu item is selected.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.ShellMenuItem.ID">
            <summary>Gets the ID of the menu item.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.ShellMenuItem.Owner">
            <summary>Gets the menu to which this menu item belongs.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.ShellMenuItem.OwnerDraw">
            <summary>Gets or sets a value indicating whether the code that you provide draws the menu item or Windows draws the menu item.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.ShellMenuItem.RadioChecked">
            <summary>Gets or sets a value indicating whether the menu item, if checked, displays a radio-button instead of a check mark.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.ShellMenuItem.Separator">
            <summary>Gets/sets whether the menu item is a separator.</summary>
            <remarks>None</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.ShellMenuItem.SubMenu">
            <summary>Gets the submenu of the menu item.</summary>
            <remarks>This method returns a valid ShellMenu object only if the menu item has a submenu(  HasSubMenu property is true).</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.ShellMenuItem.Tag">
            <summary>Gets or sets user-defined data for the menu item.</summary>
        </member>
        <member name="P:LogicNP.EZShellExtensions.ShellMenuItem.Verb">
            <summary>Gets/sets the unique string identifier for the menu item.</summary>
            <remarks>The unique identifier should be used to identify which menu item (command) has been selected when the  OnExecuteMenuItem method of  ContextMenuExtension is called. This verb is also used to identify owner drawn menu items when the  OnDrawMenuItem and  OnMeasureMenuItem methods are called.</remarks>
        </member>
        <member name="T:LogicNP.EZShellExtensions.ShellOperationEventArgs">
            <summary>Provides data for the OnShellOperation method of the  CopyHookExtension class.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ShellOperationEventArgs.#ctor(LogicNP.EZShellExtensions.ShellOperations,LogicNP.EZShellExtensions.ShellOperationFlags,System.String,System.IO.FileAttributes,System.String,System.IO.FileAttributes)">
            <summary>Initializes a new instance of the  ShellOperationEventArgs class.</summary>
            <returns>A ShellOperationEventArgs object</returns>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.ShellOperationEventArgs.DestinationFile">
            <summary>Gets the full path of the destination file.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.ShellOperationEventArgs.DestinationFileAttributes">
            <summary>Gets the attributes of the destination file.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.ShellOperationEventArgs.Flags">
            <summary>Gets the flags/settings associated with the shell operation.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.ShellOperationEventArgs.Operation">
            <summary>Gets the type of the shell operation.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.ShellOperationEventArgs.SourceFile">
            <summary>Gets the full path of the source file.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.ShellOperationEventArgs.SourceFileAttributes">
            <summary>Gets the attributes of the source file.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="T:LogicNP.EZShellExtensions.SpecialProgIDTargets">
            <summary>Provides common target strings for shell extensions.</summary>
            <remarks>Use the constant strings defined in this class to target shell extensions to special ProgIDs defined by Windows. For example, if you apply the  TargetExtensionAttribute constructor to your property sheet extension and specify  AllFiles as the value of for ProID, then the property page will be display in the property sheet of all files.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.SpecialProgIDTargets.#ctor">
            <summary>Initializes a new instance of the  SpecialProgIDTargets class.</summary>
            <returns>A SpecialProgIDTargets object</returns>
            <remarks>None.</remarks>
        </member>
        <member name="F:LogicNP.EZShellExtensions.SpecialProgIDTargets.AllDrives">
            <summary>Value : "Drive"</summary>
            <remarks>targets all drives on the system.</remarks>
        </member>
        <member name="F:LogicNP.EZShellExtensions.SpecialProgIDTargets.AllFiles">
            <summary>Value : "*"</summary>
            <remarks>Targets all files on the system.</remarks>
        </member>
        <member name="F:LogicNP.EZShellExtensions.SpecialProgIDTargets.AllFileSystemFolders">
            <summary>Value : "Directory"</summary>
            <remarks>Targets all file system folders(directories).</remarks>
        </member>
        <member name="F:LogicNP.EZShellExtensions.SpecialProgIDTargets.AllFileSystemObjects">
            <summary>Value : "AllFileSystemObjects"</summary>
            <remarks>Targets all files system folders(directories) and all files.</remarks>
        </member>
        <member name="F:LogicNP.EZShellExtensions.SpecialProgIDTargets.AllFolders">
            <summary>Value : "Folder"</summary>
            <remarks>Targets all file system and virtual folders like Control Panel.</remarks>
        </member>
        <member name="F:LogicNP.EZShellExtensions.SpecialProgIDTargets.AllNetworkServers">
            <summary>Value : "NetServer"</summary>
            <remarks>Targets all network servers.</remarks>
        </member>
        <member name="F:LogicNP.EZShellExtensions.SpecialProgIDTargets.AllNetworkShares">
            <summary>Value : "NetShare"</summary>
            <remarks>Targets all network shares.</remarks>
        </member>
        <member name="F:LogicNP.EZShellExtensions.SpecialProgIDTargets.AllPrinters">
            <summary>Value : "Printers"</summary>
            <remarks>Targets all printers.</remarks>
        </member>
        <member name="F:LogicNP.EZShellExtensions.SpecialProgIDTargets.AudioCD">
            <summary>Value : "AudioCD"</summary>
            <remarks>Targets a drive when it contains an Audio CD.</remarks>
        </member>
        <member name="F:LogicNP.EZShellExtensions.SpecialProgIDTargets.DVDWin2000">
            <summary>Value : "DVD"</summary>
            <remarks>Targets a DVD drive when it contains a DVD movie. Use on Windows 2000 and above.</remarks>
        </member>
        <member name="F:LogicNP.EZShellExtensions.SpecialProgIDTargets.DVDWin98">
            <summary>Value : "DVDFile"</summary>
            <remarks>Targets a DVD drive when it contains a DVD movie. Use on Windows 98 only.</remarks>
        </member>
        <member name="F:LogicNP.EZShellExtensions.SpecialProgIDTargets.EntireNetwork">
            <summary>Value : "Network"</summary>
            <remarks>Targets the 'Entire Network' folder.</remarks>
        </member>
        <member name="T:LogicNP.EZShellExtensions.SystemDefinedProperty">
            <summary>Represents a system defined property.</summary>
        </member>
        <member name="M:LogicNP.EZShellExtensions.SystemDefinedProperty.#ctor(System.String)">
            <summary>Initializes a new instance of the  SystemDefinedProperty class.</summary>
            <returns>A  SystemDefinedProperty object.</returns>
            <param name="canonicalName">The canonical name (such as "System.Authors") of the system defined property.</param>
        </member>
        <member name="T:LogicNP.EZShellExtensions.TargetExtensionAttribute">
            <summary>Specifies the file extension or file ProgID that a shell extension targets.</summary>
            <remarks>    This attribute is applied to the class derived from the     shell extension base classes in EZShellExtensions. For example,     when this attribute is applied to a class derived from     ContextMenuExtension with a value of .bmp, then the context     menu extension is invoked whenever .bmp files are     right-clicking.     When using the ProgID form of this attribute you can use     constants defined in the          SpecialProgIDTargets class to specify the ProgID.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.TargetExtensionAttribute.#ctor">
            <summary>Initializes a new instance of the  TargetExtensionAttribute class.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.TargetExtensionAttribute.#ctor(Microsoft.Win32.RegistryHive,System.String)">
            <summary>Initializes a new instance of the  TargetExtensionAttribute class.</summary>
            <returns>A TargetExtensionAttribute object</returns>
            <remarks>This form of the constructor is used when you need to specify an explicit path in the registry where the extension must be registered. Currently, only property sheet extensions need this form of the constructor. You can use one of the constants defined in the  PropertySheetExtensionTargets class to specify the value of the subKeyPath parameter.</remarks>
            <param name="root">The root registry key under which registration of the extension will be done.</param>
            <param name="subKeyPath">The subkey under the root key at which registration of the extension will be done.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.TargetExtensionAttribute.#ctor(System.String,System.Boolean)">
            <summary>Initializes a new instance of the  TargetExtensionAttribute class.</summary>
            <returns>A TargetExtensionAttribute object</returns>
            <remarks>When specifying a ProgID, you can use constants defined in the  SpecialProgIDTargets class.</remarks>
            <param name="param">The extension or ProgID that the shell extension to which this attribute is applied targets.</param>
            <param name="extension">True if the param parameter indicates an extension, False if it indicates a ProgID.</param>
        </member>
        <member name="P:LogicNP.EZShellExtensions.TargetExtensionAttribute.ProgID">
            <summary>Gets the ProgID associated with the attribute.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="T:LogicNP.EZShellExtensions.ThumbnailEventArgs">
            <summary>Provides data for the  OnGetThumbnail method of the  ThumbnailExtension class.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ThumbnailEventArgs.#ctor(System.Int32,System.Int32,System.Int32,LogicNP.EZShellExtensions.ThumbnailSettings)">
            <summary>Initializes a new instance of the  ThumbnailEventArgs class.</summary>
            <returns>A ThumbnailEventArgs object</returns>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.ThumbnailEventArgs.ColorDepth">
            <summary>Gets the recommended color depth of the thumbnail in bits per pixel.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.ThumbnailEventArgs.Height">
            <summary>Gets the required height of the thumbnail.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.ThumbnailEventArgs.ThumbnailSettings">
            <summary>Gets the flags/settings for the thumbnail retrieval.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.ThumbnailEventArgs.Width">
            <summary>Gets the width of the thumbnail.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="T:LogicNP.EZShellExtensions.ThumbnailExtension">
            <summary>Provides a base implementation of a thumbnail extension. To develop your own thumbnail extension, derive your own class from this class and override the appropriate methods.</summary>
            <remarks>When Windows Explorer is displaying files and folders in Thumbnail View, a graphical snapshot/preview/summary is displayed as appropriate for each file or folder. By implementing a thumbnail extension, you can specify the graphic that is displayed for the file class that the extension targets.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ThumbnailExtension.#ctor">
            <summary>Initializes a new instance of the ThumbnailExtension class.</summary>
            <remarks>None.</remarks>
            <returns>A ThumbnailExtension object</returns>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ThumbnailExtension.OnGetDateTimeStamp">
            <summary>Called to retrieve the date and time stamp for the thumbnail</summary>
            <returns>A DateTime which indicates the date and time at which the thumbnail is generated.</returns>
            <remarks>This method is only called if the  CachingPolicy property is set to  CachingPolicy.Explicit. The date and time returned by this method is saved by Windows Explorer along with the thumbnail. If the date and time on the next call to this method is different, the  OnGetThumbnail method will be called to get a new thumbnail.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ThumbnailExtension.OnGetThumbnail(LogicNP.EZShellExtensions.ThumbnailEventArgs)">
            <summary>Called when the thumbnail is to be retrieved for the file specified by TargetFile.</summary>
            <returns>Bitmap</returns>
            <remarks>None.</remarks>
            <param name="e">Settings which specify how the thumbnail is to generated.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ThumbnailExtension.OnInitialize">
            <summary>Called after the thumbnail extension is initialized.</summary>
            <returns>Boolean</returns>
            <remarks>Override this method to perform initialization tasks specific to your shell extension, such as specifying the  CachingPolicy.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ThumbnailExtension.RegisterExtension(System.Type)">
            <summary>Registers the extension for use by the system.</summary>
            <returns>None.</returns>
            <remarks>Call this method in the function marked with the ComRegisterFunctionAttribute attribute in your project.</remarks>
            <param name="t">The type representing the thumbnail extension class derived from  ThumbnailExtension.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ThumbnailExtension.UnRegisterExtension(System.Type)">
            <summary>Unregisters the extension for use by the system.</summary>
            <remarks>Call this method in the function marked with the ComUnRegisterFunctionAttribute attribute in your project.</remarks>
            <returns>None.</returns>
            <param name="t">The type representing the thumbnail extension class derived from  ThumbnailExtension.</param>
        </member>
        <member name="P:LogicNP.EZShellExtensions.ThumbnailExtension.CachingPolicy">
            <summary>Gets/Sets how thumbnails generated by the extension are cached by Windows Explorer.</summary>
            <remarks>The default value of this property is  CachingPolicy.None.</remarks>
        </member>
        <member name="P:LogicNP.EZShellExtensions.ThumbnailExtension.TargetFile">
            <summary>Gets the full path of the file for which the thumbnail is being retrieved.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="T:LogicNP.EZShellExtensions.ThumbnailProvider">
            <summary>Provides a base implementation of a thumbnail provider. To develop your own thumbnail provider, derive your own class from this class and override the appropriate methods.</summary>
            <remarks>On Windows Vista, in addition to the  ThumbnailExtension, thumbnails can also be provided using the ThumbnailProvider extension.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ThumbnailProvider.#ctor">
            <summary>Initializes a new instance of the  ThumbnailProvider class.</summary>
            <returns>A  ThumbnailProvider object.</returns>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ThumbnailProvider.OnGetThumbnail(LogicNP.EZShellExtensions.GetThumbnailEventArgs)">
            <summary>Called when the thumbnail is to be retrieved for the file specified by TargetFile.</summary>
            <returns>A bitmap which represents the thumbnail for the file.</returns>
            <param name="e">Settings which specify how the thumbnail is to generated.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ThumbnailProvider.OnInitialize">
            <summary>Called when the thumbnail provider is initialized.</summary>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ThumbnailProvider.RegisterExtension(System.Type)">
            <summary>Registers the extension for use by the system.</summary>
            <param name="t">The type representing the thumbnail provider class derived from  ThumbnailProvider.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ThumbnailProvider.UnRegisterExtension(System.Type)">
            <summary>Unregisters the extension from the system</summary>
            <remarks>Call this method in the function marked with the ComUnRegisterFunctionAttribute attribute in your project.</remarks>
            <param name="t">The type representing the thumbnail provider class derived from  ThumbnailProvider.</param>
        </member>
        <member name="P:LogicNP.EZShellExtensions.ThumbnailProvider.TargetFile">
            <summary>Gets the full path of the file for which the thumbnail is being retrieved.</summary>
            <remarks>This property returns a valid value in or after the  OnInitialize event.</remarks>
        </member>
        <member name="T:LogicNP.EZShellExtensions.ThumbnailProviderAttribute">
            <summary>Specifies properties of a  ThumbnailProvider.</summary>
            <remarks>Apply this attribute to a class derived from  ThumbnailProvider to specify the properties of the provider.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ThumbnailProviderAttribute.#ctor">
            <summary>Initializes a new instance of the  ThumbnailProvider class</summary>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ThumbnailProviderAttribute.#ctor(Microsoft.Win32.RegistryHive,System.String)">
            <summary>Initializes a new instance of the  ThumbnailProvider class</summary>
            <remarks>This form of the constructor is used when you need to specify an explicit path in the registry where the extension must be registered.</remarks>
            <returns>A  ThumbnailProvider object.</returns>
            <param name="root">The root registry key under which registration of the extension will be done.</param>
            <param name="subKeyPath">The subkey under the root key at which registration of the extension will be done.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ThumbnailProviderAttribute.#ctor(System.String,System.Boolean)">
            <summary>Initializes a new instance of the  ThumbnailProvider class</summary>
            <remarks>When specifying a ProgID, you can use constants defined in the  SpecialProgIDTargets class.</remarks>
            <returns>A  ThumbnailProvider object.</returns>
            <param name="param">The extension or ProgID that the shell extension to which this attribute is applied targets.</param>
            <param name="extension">True if the param parameter indicates an extension, False if it indicates a ProgID.</param>
        </member>
        <member name="P:LogicNP.EZShellExtensions.ThumbnailProviderAttribute.Adornment">
            <summary>Gets the sets the adornment to use for the thumbnails returned by this provider.</summary>
        </member>
        <member name="P:LogicNP.EZShellExtensions.ThumbnailProviderAttribute.OverlayImage">
            <summary>Gets or sets the overlay image to use for the thumbnails returned by this provider.</summary>
            <remarks>The overlay image must be specified as the full path of an icon file (for example, c:\myIcon.ico) or the full path of a exe/dll file and the index of the icon within that file (for example, "c:\MyExtension.dll,1")</remarks>
        </member>
        <member name="T:LogicNP.EZShellExtensions.ToolBand">
            <summary>Provides a base implementation for a toolband band object. To develop your own toolband, derive your own class from this class.</summary>
            <remarks>A toolband allows you to add custom toolbars to the Internet Explorer toolbar area. Users display a toolbar by selecting it from the Toolbars submenu of the View menu or from the shortcut menu that is displayed by right-clicking the toolbar area.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ToolBand.#ctor">
            <summary>Initializes a new instance of the  ToolBand class.</summary>
            <returns>A ToolBand object</returns>
            <remarks>None.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ToolBand.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <returns>None.</returns>
            <remarks>None.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ToolBand.RegisterExtension(System.Type)">
            <summary>Registers the extension for use by the system.</summary>
            <returns>None.</returns>
            <remarks>Call this method in the function marked with the ComRegisterFunctionAttribute attribute in your project.</remarks>
            <param name="t">The type representing the toolband extension class derived from  Toolband.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.ToolBand.UnRegisterExtension(System.Type)">
            <summary>Unregisters the extension from the system.</summary>
            <remarks>Call this method in the function marked with the ComUnRegisterFunctionAttribute attribute in your project.</remarks>
            <returns>None.</returns>
            <param name="t">The type representing the toolband class derived from  ToolBand.</param>
        </member>
        <member name="T:LogicNP.EZShellExtensions.UserDefinedProperty">
            <summary>Represents a user defined property.</summary>
        </member>
        <member name="M:LogicNP.EZShellExtensions.UserDefinedProperty.#ctor(System.String)">
            <summary>Initializes a new instance of the  UserDefinedProperty class.</summary>
            <returns>A  UserDefinedProperty object.</returns>
            <param name="canonicalName">The canonical name (for example, "TxtFiles.NumLines") of the user defined property.</param>
        </member>
        <member name="T:LogicNP.EZShellExtensions.Utils">
            <summary>Provides helper methods.</summary>
        </member>
        <member name="M:LogicNP.EZShellExtensions.Utils.BrowseTo">
            <summary>Causes Windows Explorer to browse to the specified folder.</summary>
        </member>
        <member name="M:LogicNP.EZShellExtensions.Utils.BrowseTo(System.String,System.IntPtr)">
            <summary>Causes Windows Explorer to browse to the specified folder.</summary>
            <returns>Returns true if successful, false otherwise.</returns>
            <param name="path">The path of the folder that is to be browsed.</param>
            <param name="explorerHWnd">The handle of the main Windows Explorer window. This is typically the value of the  ExecuteMenuItemEventArgs.HWnd property</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.Utils.BrowseTo(System.String,System.IntPtr,LogicNP.EZShellExtensions.BrowseFlags)">
            <summary>Causes Windows Explorer to browse to the specified folder.</summary>
            <returns>Returns true if successful, false otherwise.</returns>
            <param name="path">The path of the folder that is to be browsed.</param>
            <param name="explorerHWnd">The handle of the main Windows Explorer window. This is typically the value of the  ExecuteMenuItemEventArgs.HWnd property</param>
            <param name="flags">A value which specifies additional options.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.Utils.BrowseTo(System.IntPtr,System.IntPtr)">
            <summary>Causes Windows Explorer to browse the folder represented by the specified PIDL.</summary>
            <returns>Returns true if successful, false otherwise.</returns>
            <param name="pidl">The fully qualified PIDL of the folder which is to be browsed.</param>
            <param name="explorerHWnd">The handle of the main Windows Explorer window. This is typically the value of the  ExecuteMenuItemEventArgs.HWnd property</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.Utils.BrowseTo(System.IntPtr,System.IntPtr,LogicNP.EZShellExtensions.BrowseFlags)">
            <summary>Causes Windows Explorer to browse the folder represented by the specified PIDL.</summary>
            <returns>Returns true if successful, false otherwise.</returns>
            <param name="pidl">The fully qualified PIDL of the folder which is to be browsed.</param>
            <param name="explorerHWnd">The handle of the main Windows Explorer window. This is typically the value of the  ExecuteMenuItemEventArgs.HWnd property</param>
            <param name="flags">A value which specifies additional options.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.Utils.ExecuteShellCommand">
            <summary>Executes the specified shell command.</summary>
        </member>
        <member name="M:LogicNP.EZShellExtensions.Utils.ExecuteShellCommand(System.IntPtr,LogicNP.EZShellExtensions.ShellCommand,System.IntPtr)">
            <summary>Executes the specified shell command on the specified PIDL.</summary>
            <returns>True if the command was successfully executed; False otherwise.</returns>
            <param name="pidl">The full PIDL on which the shell command should be executed.</param>
            <param name="command">The shell command to be executed.</param>
            <param name="hWnd">The handle of the window to be used as parent if any windows are shown while executing the command.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.Utils.ExecuteShellCommand(System.IntPtr,LogicNP.EZShellExtensions.ShellCommand)">
            <summary>Executes the specified shell command on the specified PIDL.</summary>
            <returns>True if the command was successfully executed; False otherwise.</returns>
            <param name="pidl">The full PIDL on which the shell command should be executed.</param>
            <param name="command">The shell command to be executed.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.Utils.GetControlWindow(System.IntPtr,LogicNP.EZShellExtensions.ControlWindow)">
            <summary>Gets the handle of the specified control window.</summary>
            <returns>The handle of the specified control window.</returns>
            <param name="explorerHWnd">The handle of the main Windows Explorer window. This is typically the value of the  ExecuteMenuItemEventArgs.HWnd property</param>
            <param name="window">The control window whose handle is to be retrieved.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.Utils.GetDriveType(System.String)">
            <summary>Gets the type of the drive represented by the specified path.</summary>
            <returns>The type of the drive represented by the specified path.</returns>
            <param name="rootPath">The root path whose type is to be determined.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.Utils.GetDSDISPLAYSPECOPTIONSFromDataObject(LogicNP.EZShellExtensions.Interop.IOleDataObject)">
            <summary>Gets data in the "DsDisplaySpecOptions" format defined by AD.</summary>
            <remarks>This method is used when developing context menu or property sheet extensions for Active Directory (AD) objects.</remarks>
            <param name="dataObject">The dataobject from which to retrieve data in the "DsDisplaySpecOptions" format.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.Utils.GetDSOBJECTFromDataObject(LogicNP.EZShellExtensions.Interop.IOleDataObject)">
            <summary>Gets data in the "DsObjectNames" format defined by AD.</summary>
            <remarks>This method is used when developing context menu or property sheet extensions for Active Directory (AD) objects.</remarks>
            <param name="dataObject">The dataobject from which to retrieve data in the "DsObjectNames" format.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.Utils.GetFileType(System.String)">
            <summary>Gets the type of the file/folder.</summary>
            <remarks>The type of the file/folder is generally shown in the 'Type' column by Windows Explorer. For example, the type of '.txt' files is "Text Document".</remarks>
            <param name="path">The full path of the file/folder.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.Utils.GetPIDLListFromDataObject(LogicNP.EZShellExtensions.Interop.IOleDataObject)">
            <summary>Gets an array of PIDLs present in the specified dataobject.</summary>
            <returns>An array of PIDLs present in the specified dataobject. If the PIDLs are not present in the dataobject, an empty array is returned.</returns>
            <param name="dataObject">The dataobject which may contain the PIDLs in the proper format.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.Utils.GetShellBrowser(System.IntPtr)">
            <summary>Gets the IShellBrowser interface of Windows Explorer.</summary>
            <returns>The IShellBrowser interface of Windows Explorer.</returns>
            <param name="explorerHWnd">The handle of the main Windows Explorer window. This is typically the value of the  ExecuteMenuItemEventArgs.HWnd property</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.Utils.GetSpecialFolderPath(LogicNP.EZShellExtensions.SpecialFolders)">
            <summary>Gets the full path of the specified special folder.   " --></summary>
            <returns>The full path of the specified special folder.</returns>
            <param name="specialFolder">             The special folder whose full path is to be         retrieved.     </param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.Utils.GetSpecialFolderPIDL(LogicNP.EZShellExtensions.SpecialFolders)">
            <summary>Gets the PIDL for special folders such as the Control Panel.  " --></summary>
            <returns>The PIDL for special folders such as the Control Panel.  " --></returns>
            <param name="specialFolder">             The special folder whose PIDL is to be retrieved.     </param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.Utils.GetSystemIconIndexFromExtension(System.String,LogicNP.EZShellExtensions.GetSystemIconIndexFlags)">
            <summary>Gets the index of the icon for the specified file extension in the system image list.</summary>
            <param name="extension">The file extension such as ".bmp".</param>
            <param name="flags">Specifies what type of icon to get the index for.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.Utils.GetSystemIconIndexFromPath(System.String,LogicNP.EZShellExtensions.GetSystemIconIndexFlags)">
            <summary>Gets the index of the icon for the specified file system path in the system image list.</summary>
            <param name="path">The full path of the file or folder whose system image list icon index is to be retrieved.</param>
            <param name="flags">Specifies what type of icon to get the index for.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.Utils.GetSystemIconIndexFromPIDL(System.IntPtr,LogicNP.EZShellExtensions.GetSystemIconIndexFlags)">
            <summary>Gets the index of the icon for the specified PIDL in the system image list.</summary>
            <returns>The index of the icon for the specified PIDL in the system image list.</returns>
            <param name="pidl">The full PIDL whose system icon index is to be determined.</param>
            <param name="flags">Specifies what type of icon to get the index for.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.Utils.GetWindowsDirectory">
            <summary>Gets the path of the directory where windows is installed.</summary>
            <remarks>Typically Windows is installed in "c:\windows", but if this is not the case, this function can be used to determine the installation directory.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.Utils.LoadBitmapFromFile(System.String,System.Int32,System.Int32)">
            <summary>Loads a bitmap from the specified file path.</summary>
            <returns>The handle to the loaded bitmap.</returns>
            <param name="path">The full path of the bitmap file.</param>
            <param name="cx">The width which should be used when loading the bitmap. Set to 0 to specify the actual width.</param>
            <param name="cy">The height which should be used when loading the bitmap. Set to 0 to specify the actual height.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.Utils.LoadIconFromFile(System.String,System.Int32,System.Int32)">
            <summary>Loads an icon from the specified file path.</summary>
            <param name="path">The full path to the icon file.</param>
            <param name="cx">The width which should be used when loading the icon. Set to 0 to specify the actual width.</param>
            <param name="cy">The height which should be used when loading the icon. Set to 0 to specify the actual height.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.Utils.PathFromPIDL(System.IntPtr)">
            <summary>Gets the full path from the specified PIDL.   " --></summary>
            <returns>The full path from the specified PIDL.</returns>
            <param name="pidl">             The PIDL which is to be converted into a path.     </param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.Utils.PIDLCompare(System.IntPtr,System.IntPtr)">
            <summary>Compares two PIDLs. " --></summary>
            <returns>Returns zero if the two PIDLs are equal, a value less than zero if the first PIDL is lesser than the second PIDL, and a value greater than zero if the first PIDL is greater than the second PIDL.</returns>
            <param name="pidl1">             The fist PIDL.     </param>
            <param name="pidl2">             The second PIDL.     </param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.Utils.PIDLConcat(System.IntPtr,System.IntPtr)">
            <summary>Concatenates two PIDLs.</summary>
            <returns>The concatenated PIDL.</returns>
            <remarks>Free the returned PIDL with the  PIDLFree method after use.</remarks>
            <param name="pidl1">The first PIDL.</param>
            <param name="pidl2">The second PIDL.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.Utils.PIDLCopy(System.IntPtr)">
            <summary>Makes a copy a PIDL.  " --></summary>
            <returns>A copy of the PIDL.</returns>
            <remarks>Free the returned PIDL with the  PIDLFree method after use.</remarks>
            <param name="pidl">             The PIDL to copy.     </param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.Utils.PIDLFree(System.IntPtr)">
            <summary>Frees the specified PIDL.  " --></summary>
            <param name="pidl">             The PIDL to free.     </param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.Utils.PIDLFromPath(System.String)">
            <summary>Gets a PIDL from a path. " --></summary>
            <returns>Free the returned PIDL with the  PIDLFree method after use.</returns>
            <param name="path">             The path for which the PIDL is to be retrieved.     </param>
        </member>
        <member name="T:LogicNP.EZShellExtensions.VerticalExplorerBar">
            <summary>Provides a base implementation for a vertical explorer bar band object. To develop your own vertical explorer bar, derive your own class from this class.</summary>
            <remarks>None.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.VerticalExplorerBar.#ctor">
            <summary>Initializes a new instance of the  VerticalExplorerBar class.</summary>
            <returns>A VerticalExplorerBar object</returns>
            <remarks>None.</remarks>
        </member>
        <member name="M:LogicNP.EZShellExtensions.VerticalExplorerBar.RegisterExtension(System.Type)">
            <summary>Registers the extension for use by the system.</summary>
            <returns>None.</returns>
            <remarks>Call this method in the function marked with the ComRegisterFunctionAttribute attribute in your project.</remarks>
            <param name="t">The type representing the vertical explorer bar class derived from  VerticalExplorerBar.</param>
        </member>
        <member name="M:LogicNP.EZShellExtensions.VerticalExplorerBar.UnRegisterExtension(System.Type)">
            <summary>Unregisters the extension from the system.</summary>
            <remarks>Call this method in the function marked with the ComUnRegisterFunctionAttribute attribute in your project.</remarks>
            <returns>None.</returns>
            <param name="t">The type representing the vertical explorer bar class derived from  VerticalExplorerBar Class.</param>
        </member>
    </members>
</doc>
